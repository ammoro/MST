66,70d65
< 
< !!$       write(90,*)'ncluster=',ncluster
< !!$       write(90,*) ffp(1,i1,i2,1), ffn(1,i1,i2,1)
< !!$       write(90,*) ffp(2,i1,i2,1), ffn(2,i1,i2,1)
<        
80c75
< !          write(*,*)usnr(1:2),usni(1:2)
---
>           
84d78
< !             write(90,*) ncl,rhop,rhon
86,101d79
< c *** gaussian formmactor
<              if (br>0) gffr=exp(-br*abs(q2)/hbarc/hbarc)
<              if (bi>0) gffi=exp(-bi*abs(q2)/hbarc/hbarc)
<              ucl=tapb(1)*rhop + tapb(2)*rhon
<              ucl = (1./2.) * pl(l) * wt(xi) * ucl
<              ucl=ucnr(ncl)*real(ucl) + zi*ucni(ncl)*dimag(ucl)
<              ucentl(l) = ucentl(l) + ucl
<              if(ncl.eq.1.and.l<1.and.x<1e-3)then !on-shell
< ! if(xi.eq.1.and.l<1.and.(i1.eq.10).and.(i2.eq.10))then
< !                write(90,*)'Cluster:',ncl
< !             write(90,'(6g12.3)')theta,tapb(1),tapb(2),rhop,rhon
<                 if (k<200) then
<              write(90,'(1f10.2,2x,1g12.5,2x,1g12.5)')k, rhop,rhon
<              endif
<              endif
< 
110c88,103
< 30             continue !loop in partial waves 
---
> 
> c *** gaussian formmactor
>              if (br>0) gffr=exp(-br*abs(q2)/hbarc/hbarc)
>              if (bi>0) gffi=exp(-bi*abs(q2)/hbarc/hbarc)
> !!$             if (bi>0) then
> !!$                write(*,*) 'Using Gaussian FF in Potential',bi,q2,gff
> !!$             end if
> 
>              ucl=tapb(1)*rhop + tapb(2)*rhon
>              ucl = (1./2.) * pl(l) * wt(xi) * ucl
>              ucl=ucnr(ncl)*real(ucl) + zi*ucni(ncl)*dimag(ucl)
> !              ucl=ucnr*real(ucl)*gffr + zi*ucni*dimag(ucl)*gffi
>              ucentl(l) = ucentl(l) + ucl
> !            if (abs(ucl)>1.) write(*,*) 'l,ucentl(l)=',l,ucentl(l),
> !     &                                tapb(1),tapb(2)
> 30             continue 
1078a1072
> 
1629a1624
> 
1879d1873
< !         write(*,*)'norms:',ucrnorm,ucinorm,usrnorm,usinorm
1898,1899c1892
< !                     call ffactfermi(ncl,n1,n2,nzclus,nnclus)
<                       call ffactfermi2(ncl,n1,n2,nzclus,nnclus)
---
>                      call ffactfermi(ncl,n1,n2,nzclus,nnclus)
2474,2553d2466
< 
< c *** -----------------------------------------------------
< c *** Calculates for 3 parameter Fermi density distribution 
< c *** normalized to number of particles
< c *** -----------------------------------------------------
<       subroutine ffactfermi2(ncl,n1,n2,nzclus,nnclus)
<         use params
<         implicit real*8 (a-h,k,o-z)
<        integer :: ncl,n1,n2,i,m,kout=16
<        integer :: nramax,kin=13, nzclus,nnclus,norm
<        real*8  :: w3pf,z3pf,c3pf
<        real*8  :: drx,rnorm,densq,yyy,r
<        real*8,allocatable,target ::bs(:,:),densr(:), bsr2(:,:)
<        real*8, pointer :: bp(:),bpr2(:)
< 
<        namelist /bs3pf/ w3p,z3p,c3p,w3n,z3n,c3n,nramax,drx
<        
<        read(kin,nml=bs3pF)
<        write(*,nml=bs3PF)
<        allocate(densr(nramax))
<        allocate(bs(nramax,2))
<        allocate(bsr2(nramax,2))
<        
< 
<        
<        do 86 i=1,nramax
<           r=(i-1.)*drx
<           yyy = 1. + exp( (r-c3p)/z3p )
<           bs(i,1)= (1. + w3p*(r/c3p)**2)/yyy !rho(r) protons 
<           bsr2(i,1)=bs(i,1)*r*r ! rho(r)*r^2
<           yyy = 1. + exp( (r-c3n)/z3n )
<           bs(i,2)= (1. + w3n*(r/c3n)**2)/yyy !rho(r) neutrons
<           bsr2(i,2)=bs(i,2)*r*r ! rho(r)*r^2
<  86    continue
< 
<        do iso=1,2
<           bp=>bs(:,iso)
<           bpr2=>bsr2(:,iso)
<                     
<           if (iso.eq.1) then
<              norm=nzclus
<              write(*,80)"protons",nzclus
<              write(8,*) '#Fermi: protons' 
<           else
<              norm=nnclus
<              write(*,80)"neutrons",nnclus
<              write(8,*) '&'
<               write(14,*) '&'
<              write(8,*) '#Fermi: neutrons'
<           endif
<           write(14,*) '#',nramax,drx
< 80        format(a8,i3)
<           call sim2(bpr2,rnorm,1,nramax,drx,nramax)
< c          write(6,*) 'normalization =',rnorm
<           bp=bp/rnorm
<           densr=dble(norm)*bp
<       
<        do 95 i=1,nramax
<           r=(i-1)*drx
<           bp(i)=bp(i)*r**4     !rho*r^4
< c          densr(i)= densr(i)/rnorm
<           write(14,*) r,densr(i)
<           
< !          if (densr(i)<1e-10) densr(i)=0.       
< 95     continue
< 
<           call sim2(bp,rms,1,nramax,drx,nramax)
<           write(6,'(" rms=",f6.3)') sqrt(rms)
<           
< 
< c *** transforms density to momentum space
< c        write(8,*) '#3 parameter Fermi density'
<        call rtoq(densr,nramax,drx,ncl,n1,n2,iso)
<        enddo ! end loop p/n
<        deallocate(densr,bs,bsr2)
<        return
<        end 
< 
< 
< 
2655d2567
<         character*2 shname(4)
2659,2663d2570
<         shname(1)='1s'
<         shname(2)='1p'
<         shname(3)='1d'
<         shname(4)='2s'
<         
2671,2672c2578
<         write(*,'(3a8)')' Shell ',' Protons ',' Neutrons '
<         do ibs=1,nshell
---
>         do 888 ibs=1,nshell
2675d2580
<            write(*,'(4x,1a4,2i8)')shname(ibs),zorba,norba
2679,2681c2584,2586
<            norba1(ibs,1)=zorba
<            norba1(ibs,2)=norba
<         enddo
---
>            norba1(ibs,1)=norba
>            norba1(ibs,2)=zorba
> 888     continue
2696a2602
>          rho=0.
2699a2606
>             rho=1.
2703d2609
<                rho=1.
2719d2624
< !            write(*,*) isos,shname(ibs),rho
2721c2626
<          
---
> !         write(*,*) densr 
2723c2628
<       enddo !end loop p/n
---
>       enddo
2728,2729c2633,2634
<         qmax=5.
<         dq=0.1
---
>         qmax=2.
>         dq=0.05
2769,2770d2673
<       write(8,*) '&'
< 
2794d2696
<                   aa=aa1(ibs,isos) 
2814,2817d2715
< !                 if ((i1.eq.i2).and.(isos.eq.1).and.q<20) 
< !     &            write(98,*) q,densq
< !                 if ((i1.eq.i2).and.(isos.eq.2).and.q<20) 
< !     &             write(97,*) q,densq
2872,2874c2770,2771
< !        implicit real*8 (a-h,k,o-z)
<         implicit none
<         integer:: xi,m,i1,i2,ncl,n1,n2,np,i,iq
---
>         implicit real*8 (a-h,k,o-z)
>         integer:: xi,m,i1,i2,ncl,n1,n2
2876,2878c2773,2775
<         integer:: code,ncos,nramax
<         real*8 :: densq,rho,x,rnorm,drx,r,qr,a,b
<         real*8 :: k,kp,q2,q,cthnuc,theta
---
>         integer:: code,ncos
>         real*8 :: densq,rho,densr(nramax),x,rnorm
>         real*8 :: k,kp,q2,q
2880,2881c2777
<         real*8, allocatable :: dd(:)
<         real*8, intent(in) :: densr(nramax) 
---
>         real*8, allocatable :: dd(:) 
2883,2884c2779
<         real*8 :: xis(ncos), ws(ncos) 
<         allocate(dd(nramax))
---
>         real*8 :: xis(ncos)     
2886c2781
<         
---
>         allocate(dd(nramax))
2895d2789
< 
2906d2799
< !!!!             write(*,*)i,densr(i)
2940,2947d2832
< 
< cc  TEST: print on-shell values at quadrature points
< !                if ((i1.eq.i2).and.(np.eq.1).and.q<20) 
< !     &            write(98,*) q,densq
< !                 if ((i1.eq.i2).and.(np.eq.2).and.q<20) 
< !     &             write(97,*) q,densq
< 
< 
2950c2835
<             if (np.eq.1) then
---
>             if (np==1) then
