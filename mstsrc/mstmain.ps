%!PS-Adobe-3.0
%%Title: mstmain.f90
%%For: Antonio M. Moro Muñoz
%%Creator: a2ps version 4.13
%%CreationDate: Fri Oct  3 15:07:32 2003
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 14
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Symbol
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-15Encoding
%%+ font Courier-Bold-Ogonki
%%+ font Courier-BoldOblique-Ogonki
%%+ font Courier-Oblique-Ogonki
%%+ font Courier-Ogonki
%%+ font Helvetica-Bold-Ogonki
%%+ font Helvetica-Ogonki
%%+ font Times-Bold-Ogonki
%%+ font Times-Roman-Ogonki
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-15Encoding
/ISO-8859-15Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /Euro /yen /Scaron /section 
/scaron /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /Zcaron /mu /paragraph /bullet 
/zcaron /onesuperior /ordmasculine /guillemotright /OE /oe /Ydieresis /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
%%BeginResource: font Courier-Bold-Ogonki
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding OgonkiEncoding
/OgonkiEncoding [
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /quotesingle
/quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl /endash /dagger
/daggerdbl /periodcentered /paragraph /bullet /quotesinglbase /quotedblbase /quotedblright /guillemotright
/ellipsis /perthousand /questiondown /grave /circumflex /tilde /macron /ring
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /emdash /AE /ordfeminine /Oslash /OE /ordmasculine /ae
/dotlessi /oslash /oe /threesuperior /thorn /twosuperior /threequarters /Eth
/trademark /registered /onequarter /Thorn /logicalnot /plusminus /minus /onesuperior
/copyright /mu /eth /brokenbar /onehalf /dotlessj /Euro /.notdef
/space /Aogonek /breve /Lslash /currency /Lcaron /Sacute /section
/dieresis /Scaron /Scedilla /Tcaron /Zacute /hyphen /Zcaron /Zdotaccent
/degree /aogonek /ogonek /lslash /acute /lcaron /sacute /caron
/cedilla /scaron /scedilla /tcaron /zacute /hungarumlaut /zcaron /zdotaccent
% 300
/Racute /Aacute /Acircumflex /Abreve /Adieresis /Lacute /Cacute /Ccedilla
/Ccaron /Eacute /Eogonek /Edieresis /Ecaron /Iacute /Icircumflex /Dcaron
/Eth /Nacute /Ncaron /Oacute /Ocircumflex /Ohungarumlaut /Odieresis /multiply
/Rcaron /Uring /Uacute /Uhungarumlaut /Udieresis /Yacute /Tcedilla /germandbls
/racute /aacute /acircumflex /abreve /adieresis /lacute /cacute /ccedilla
/ccaron /eacute /eogonek /edieresis /ecaron /iacute /icircumflex /dcaron
/dbar /nacute /ncaron /oacute /ocircumflex /ohungarumlaut /odieresis /divide
/rcaron /uring /uacute /uhungarumlaut /udieresis /yacute /tcedilla /dotaccent
] def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding StandardEncoding
/StandardEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /section
/currency /quotesingle /quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl
/.notdef /endash /dagger /daggerdbl /periodcentered /.notdef /paragraph /bullet
/quotesinglbase /quotedblbase /quotedblright /guillemotright /ellipsis /perthousand /.notdef /questiondown
% 300
/.notdef /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/emdash /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /AE /.notdef /ordfeminine /.notdef /.notdef /.notdef /.notdef
/Lslash /Oslash /OE /ordmasculine /.notdef /.notdef /.notdef /.notdef
/.notdef /ae /.notdef /.notdef /.notdef /dotlessi /.notdef /.notdef
/lslash /oslash /oe /germandbls /.notdef /.notdef /.notdef /.notdef
] def
%%EndResource
%!
% Add composite (i.e. accented) characters to any font
% By J. Chroboczek <jec@dcs.ed.ac.uk>
%
% -- code follows this line --
%%BeginResource: procset compose 0.8 0
% Copyright (c) 1996-1999 by J. Chroboczek
% This code may be distributed under the terms of the 
% GNU Public License, either version 2 of the license, or (at your
% option) any later version.
/makeCompositeDict 20 dict def
makeCompositeDict begin
/nameUnique {                           % name nameUnique namexxxxxx
  dup length exch 1 index string cvs    % length (name)
  1 index 12 add string dup             % length (name) (...) (...)
  3 2 roll 0 exch putinterval           % length (name...)
  dup 3 2 roll
  rand 12 string cvs
  putinterval
} bind def

/doMakeComposite
{
  /compositeChars exch def
  /targetEncoding exch def
  /baseEncoding exch def
  /newfontname exch def
  /oldfontname exch def
  /oldfont oldfontname findfont def
  /newfont 20 dict def
  /oldFontMatrix oldfont /FontMatrix get def
  /oldFontBBox oldfont /FontBBox get cvlit def
  /oldfontcopy oldfont length dict def

  newfont begin
    /FontType 3 def
    /PaintType 0 def      % not used
    /FontMatrix [0.001 0 0 0.001 0 0] def
    /FontBBox
    [
      oldFontBBox 0 get oldFontBBox 1 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
      oldFontBBox 2 get oldFontBBox 3 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
    ] cvx def

    /StrokeWidth 0 def                  % not used

    /Encoding targetEncoding def

    /Decoding 256 dict def              % invert base encoding vector
    Decoding begin
      0 1 255
      { dup baseEncoding exch get exch def } bind for
    end

    newfont /compositeChars compositeChars put

    /FontName newfontname def

% make a copy of the original font, reencoding it
    oldfont
    oldfontcopy begin
      {1 index /FID ne
        {def}
        {pop pop} ifelse
      } bind forall
    end
    oldfontcopy /Encoding baseEncoding put
    oldfontname nameUnique oldfontcopy definefont
    1000 scalefont /OriginalFont exch def

    /BuildChar                          % newfont n BuildChar -
    {
      exch begin                        % n
        /OriginalFont load setfont
        /Encoding load exch get         % glyphName
        /compositeChars load dup
        2 index known                   % glyphName compositeChars known-p
        { 1 index get                   % glyphName [ 65 x y 129 ]
          dup 0 get ( ) dup             % glyphName [...] 65 ( ) ( )
          0 3 index put                 % glyphName [...] 65 (A)
          dup stringwidth setcharwidth
          0 0 moveto
          show pop                      % glyphName [...]
          dup 1 get 1 index 2 get       % glyphName [...] x y
          moveto                        % glyphName [...]
          3 get ( ) dup 3 2 roll        % glyphName ( ) ( ) 129
          0 exch put                    % glyphName (')
          show                          % glyphName
        }
        { pop
          /Decoding load                % glyphName Decoding
          dup 2 index known             % glyphName Decoding known-p
          { exch get }
          { pop pop 0 } ifelse          % n'
          ( ) dup 0 3 index put dup     % n' (A) (A)
          stringwidth setcharwidth
          0 0 moveto
          show                          % n'
        } ifelse
        pop
      end
    } bind def
  end                                   % newfont
  newfontname newfont definefont pop
} def                                   % doMakeComposite

/fillEuro {                             % w h --
  gsave exch 1000 div exch 1000 div scale
  955.852 232.172 moveto
  904.495 180.815 lineto
  829.454 117.848 734.626 83.333 636.667 83.333 curveto
  406.667 83.333 220 270 220 500 curveto
  220 730 406.667 916.667 636.667 916.667 curveto
  759.831 916.667 876.684 862.177 955.852 767.828 curveto
  988.474 855.291 lineto
  894.851 947.996 768.422 1000 636.667 1000 curveto
  360.667 1000 136.667 776 136.667 500 curveto
  136.667 224 360.667 0 636.667 0 curveto
  753.23 0 866.13 40.725 955.852 115.135 curveto
  closepath fill
  
  869.037 541.667 moveto
  901.025 625 lineto
  31.989 625 lineto
  0 541.667 lineto
  closepath fill
  
  805.059 375 moveto
  837.048 458.333 lineto
  31.989 458.333 lineto
  0 375 lineto
  closepath fill
  grestore
} bind def

/makeEuroCharstring {                   % w h -- charstring
  [ /pop cvx                            % w h mark pop
    3 index 0 0 0                       % w h mark pop w 0 0 0
    7 index 7 index /setcachedevice cvx 
                                % w h mark pop w 0 0 0 w h setcachedevice
    10 index 10 index /fillEuro load /exec cvx ] 
  cvx bind 3 1 roll pop pop
} def

/doEurifyFont {                         % oldname newname --
  exch
  findfont dup dup                      % newname dict dict dict
  /FontMatrix get matrix invertmatrix   % newname dict dict m
  {} forall pop pop [ 5 1 roll 0 0] makefont setfont   % newnamedict
  0 0 moveto
  (5) stringwidth pop                     % newname dict w
  (M) false charpath pathbbox 4 1 roll pop pop pop % newnamedict w h
  3 2 roll                                % newname w h dict
  
  dup length dict dup 3 1 roll begin      % newname w h newdict
    {1 index /FID ne {def} {pop pop} ifelse} forall
    CharStrings dup length 1 add dict dup 3 1 roll begin % newnamew h newdict newdict'
      {def} forall
      /Euro                               % newname w h newdict newdict' /Euro
      4 index 4 index makeEuroCharstring def
    end                                   % newname w h newdict newdict'
    /CharStrings exch def
  end
  3 1 roll pop pop                      % newname dict
  definefont pop
} bind def

end                                     % makeCompositeDict

% oldfontname newfontname baseEncoding targetEncoding compositeChars --
/makeComposite
{
  makeCompositeDict begin doMakeComposite end
} bind def

% oldfontname newfontname
/eurifyFont
{
  makeCompositeDict begin doEurifyFont end
} bind def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: font Courier-Bold-Ogonki
/Courier-Bold /Courier-Bold-Ogonki OgonkiEncoding StandardEncoding 111 dict
dup /Agrave [65 -50 123 27] put
dup /Aring [65 -10 123 31] put
dup /Atilde [65 -30 123 29] put
dup /Ecircumflex [69 0 123 28] put
dup /Egrave [69 0 123 27] put
dup /Gcaron [71 10 123 183] put
dup /Idieresis [73 0 123 168] put
dup /Igrave [73 0 123 27] put
dup /Ntilde [78 0 123 29] put
dup /Ograve [79 0 123 27] put
dup /Otilde [79 0 123 29] put
dup /Ucircumflex [85 0 123 28] put
dup /Ugrave [85 -30 123 27] put
dup /Ydieresis [89 0 123 168] put
dup /agrave [97 -30 0 27] put
dup /aring [97 0 0 31] put
dup /atilde [97 0 0 29] put
dup /ecircumflex [101 0 0 28] put
dup /egrave [101 0 0 27] put
dup /gcaron [103 -40 0 183] put
dup /idieresis [136 -40 0 168] put
dup /igrave [136 0 0 27] put
dup /ntilde [110 0 0 29] put
dup /ograve [111 0 0 27] put
dup /otilde [111 0 0 29] put
dup /ucircumflex [117 -20 0 28] put
dup /ugrave [117 -30 0 27] put
dup /ydieresis [121 10 0 168] put
dup /abreve [97 0 0 162] put
dup /Abreve [65 0 130 162] put
dup /amacron [97 0 0 30] put
dup /Amacron [65 0 130 30] put
dup /Aogonek [65 200 0 178] put
dup /aogonek [97 200 0 178] put
dup /cacute [99 0 0 180] put
dup /Cacute [67 0 130 180] put
dup /ccaron [99 18 0 183] put
dup /Ccaron [67 18 130 183] put
dup /ccircumflex [99 18 0 28] put
dup /Ccircumflex [67 18 130 28] put
dup /cdotaccent [99 0 0 255] put
dup /Cdotaccent [67 0 130 255] put
dup /dbar [100 200 250 173] put
dup /Dbar [208 0 0 160] put
dup /Dcaron [68 0 130 183] put
dup /dcaron [100 30 195 183] put
dup /ecaron [101 0 0 183] put
dup /Ecaron [69 0 130 183] put
dup /edotaccent [101 0 0 255] put
dup /Edotaccent [69 0 130 255] put
dup /emacron [101 0 0 30] put
dup /Emacron [69 0 130 30] put
dup /Eogonek [69 0 0 178] put
dup /eogonek [101 0 0 178] put
dup /gacute [103 0 0 180] put
dup /gbreve [103 0 0 162] put
dup /Gbreve [71 18 130 162] put
dup /gcircumflex [103 0 0 28] put
dup /Gcircumflex [71 18 130 28] put
dup /gdotaccent [103 0 0 255] put
dup /Gdotaccent [71 18 130 255] put
dup /hcircumflex [104 -20 195 28] put
dup /Hcircumflex [72 0 130 28] put
dup /Iogonek [73 20 0 178] put
dup /iogonek [105 20 0 178] put
dup /Idotaccent [73 0 130 255] put
dup /imacron [136 0 0 30] put
dup /Imacron [73 0 130 30] put
dup /itilde [136 0 0 29] put
dup /Itilde [73 0 130 29] put
dup /Jcircumflex [74 85 130 28] put
dup /Lacute [76 -100 130 180] put
dup /lacute [108 -20 195 180] put
dup /Lcaron [76 -100 130 183] put
dup /lcaron [108 0 195 183] put
dup /nacute [110 0 0 180] put
dup /Nacute [78 0 130 180] put
dup /ncaron [110 0 0 183] put
dup /Ncaron [78 0 130 183] put
dup /ohungarumlaut [111 0 0 189] put
dup /Ohungarumlaut [79 0 130 189] put
dup /omacron [111 0 0 30] put
dup /Omacron [79 0 130 30] put
dup /racute [114 0 0 180] put
dup /Racute [82 0 130 180] put
dup /rcaron [114 0 0 183] put
dup /Rcaron [82 0 130 183] put
dup /sacute [115 0 0 180] put
dup /Sacute [83 0 130 180] put
dup /scircumflex [115 0 0 28] put
dup /Scircumflex [83 0 130 28] put
dup /tcaron [116 0 107 183] put
dup /Tcaron [84 0 130 183] put
dup /Tcedilla [84 0 0 184] put
dup /tcedilla [116 0 0 184] put
dup /ubreve [117 0 0 162] put
dup /Ubreve [85 0 130 162] put
dup /uhungarumlaut [117 0 0 189] put
dup /Uhungarumlaut [85 0 130 189] put
dup /umacron [117 0 0 30] put
dup /Umacron [85 0 130 30] put
dup /uogonek [117 109 0 178] put
dup /Uogonek [85 5 23 178] put
dup /uring [117 0 0 31] put
dup /Uring [85 0 130 31] put
dup /utilde [117 0 0 29] put
dup /Utilde [85 0 130 29] put
dup /zacute [122 0 0 180] put
dup /Zacute [90 0 130 180] put
dup /zdotaccent [122 0 0 255] put
dup /Zdotaccent [90 0 130 255] put
makeComposite
%%EndResource

%%EndResource
%%BeginResource: font Courier-BoldOblique-Ogonki
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding OgonkiEncoding
/OgonkiEncoding [
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /quotesingle
/quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl /endash /dagger
/daggerdbl /periodcentered /paragraph /bullet /quotesinglbase /quotedblbase /quotedblright /guillemotright
/ellipsis /perthousand /questiondown /grave /circumflex /tilde /macron /ring
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /emdash /AE /ordfeminine /Oslash /OE /ordmasculine /ae
/dotlessi /oslash /oe /threesuperior /thorn /twosuperior /threequarters /Eth
/trademark /registered /onequarter /Thorn /logicalnot /plusminus /minus /onesuperior
/copyright /mu /eth /brokenbar /onehalf /dotlessj /Euro /.notdef
/space /Aogonek /breve /Lslash /currency /Lcaron /Sacute /section
/dieresis /Scaron /Scedilla /Tcaron /Zacute /hyphen /Zcaron /Zdotaccent
/degree /aogonek /ogonek /lslash /acute /lcaron /sacute /caron
/cedilla /scaron /scedilla /tcaron /zacute /hungarumlaut /zcaron /zdotaccent
% 300
/Racute /Aacute /Acircumflex /Abreve /Adieresis /Lacute /Cacute /Ccedilla
/Ccaron /Eacute /Eogonek /Edieresis /Ecaron /Iacute /Icircumflex /Dcaron
/Eth /Nacute /Ncaron /Oacute /Ocircumflex /Ohungarumlaut /Odieresis /multiply
/Rcaron /Uring /Uacute /Uhungarumlaut /Udieresis /Yacute /Tcedilla /germandbls
/racute /aacute /acircumflex /abreve /adieresis /lacute /cacute /ccedilla
/ccaron /eacute /eogonek /edieresis /ecaron /iacute /icircumflex /dcaron
/dbar /nacute /ncaron /oacute /ocircumflex /ohungarumlaut /odieresis /divide
/rcaron /uring /uacute /uhungarumlaut /udieresis /yacute /tcedilla /dotaccent
] def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding StandardEncoding
/StandardEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /section
/currency /quotesingle /quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl
/.notdef /endash /dagger /daggerdbl /periodcentered /.notdef /paragraph /bullet
/quotesinglbase /quotedblbase /quotedblright /guillemotright /ellipsis /perthousand /.notdef /questiondown
% 300
/.notdef /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/emdash /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /AE /.notdef /ordfeminine /.notdef /.notdef /.notdef /.notdef
/Lslash /Oslash /OE /ordmasculine /.notdef /.notdef /.notdef /.notdef
/.notdef /ae /.notdef /.notdef /.notdef /dotlessi /.notdef /.notdef
/lslash /oslash /oe /germandbls /.notdef /.notdef /.notdef /.notdef
] def
%%EndResource
%!
% Add composite (i.e. accented) characters to any font
% By J. Chroboczek <jec@dcs.ed.ac.uk>
%
% -- code follows this line --
%%BeginResource: procset compose 0.8 0
% Copyright (c) 1996-1999 by J. Chroboczek
% This code may be distributed under the terms of the 
% GNU Public License, either version 2 of the license, or (at your
% option) any later version.
/makeCompositeDict 20 dict def
makeCompositeDict begin
/nameUnique {                           % name nameUnique namexxxxxx
  dup length exch 1 index string cvs    % length (name)
  1 index 12 add string dup             % length (name) (...) (...)
  3 2 roll 0 exch putinterval           % length (name...)
  dup 3 2 roll
  rand 12 string cvs
  putinterval
} bind def

/doMakeComposite
{
  /compositeChars exch def
  /targetEncoding exch def
  /baseEncoding exch def
  /newfontname exch def
  /oldfontname exch def
  /oldfont oldfontname findfont def
  /newfont 20 dict def
  /oldFontMatrix oldfont /FontMatrix get def
  /oldFontBBox oldfont /FontBBox get cvlit def
  /oldfontcopy oldfont length dict def

  newfont begin
    /FontType 3 def
    /PaintType 0 def      % not used
    /FontMatrix [0.001 0 0 0.001 0 0] def
    /FontBBox
    [
      oldFontBBox 0 get oldFontBBox 1 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
      oldFontBBox 2 get oldFontBBox 3 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
    ] cvx def

    /StrokeWidth 0 def                  % not used

    /Encoding targetEncoding def

    /Decoding 256 dict def              % invert base encoding vector
    Decoding begin
      0 1 255
      { dup baseEncoding exch get exch def } bind for
    end

    newfont /compositeChars compositeChars put

    /FontName newfontname def

% make a copy of the original font, reencoding it
    oldfont
    oldfontcopy begin
      {1 index /FID ne
        {def}
        {pop pop} ifelse
      } bind forall
    end
    oldfontcopy /Encoding baseEncoding put
    oldfontname nameUnique oldfontcopy definefont
    1000 scalefont /OriginalFont exch def

    /BuildChar                          % newfont n BuildChar -
    {
      exch begin                        % n
        /OriginalFont load setfont
        /Encoding load exch get         % glyphName
        /compositeChars load dup
        2 index known                   % glyphName compositeChars known-p
        { 1 index get                   % glyphName [ 65 x y 129 ]
          dup 0 get ( ) dup             % glyphName [...] 65 ( ) ( )
          0 3 index put                 % glyphName [...] 65 (A)
          dup stringwidth setcharwidth
          0 0 moveto
          show pop                      % glyphName [...]
          dup 1 get 1 index 2 get       % glyphName [...] x y
          moveto                        % glyphName [...]
          3 get ( ) dup 3 2 roll        % glyphName ( ) ( ) 129
          0 exch put                    % glyphName (')
          show                          % glyphName
        }
        { pop
          /Decoding load                % glyphName Decoding
          dup 2 index known             % glyphName Decoding known-p
          { exch get }
          { pop pop 0 } ifelse          % n'
          ( ) dup 0 3 index put dup     % n' (A) (A)
          stringwidth setcharwidth
          0 0 moveto
          show                          % n'
        } ifelse
        pop
      end
    } bind def
  end                                   % newfont
  newfontname newfont definefont pop
} def                                   % doMakeComposite

/fillEuro {                             % w h --
  gsave exch 1000 div exch 1000 div scale
  955.852 232.172 moveto
  904.495 180.815 lineto
  829.454 117.848 734.626 83.333 636.667 83.333 curveto
  406.667 83.333 220 270 220 500 curveto
  220 730 406.667 916.667 636.667 916.667 curveto
  759.831 916.667 876.684 862.177 955.852 767.828 curveto
  988.474 855.291 lineto
  894.851 947.996 768.422 1000 636.667 1000 curveto
  360.667 1000 136.667 776 136.667 500 curveto
  136.667 224 360.667 0 636.667 0 curveto
  753.23 0 866.13 40.725 955.852 115.135 curveto
  closepath fill
  
  869.037 541.667 moveto
  901.025 625 lineto
  31.989 625 lineto
  0 541.667 lineto
  closepath fill
  
  805.059 375 moveto
  837.048 458.333 lineto
  31.989 458.333 lineto
  0 375 lineto
  closepath fill
  grestore
} bind def

/makeEuroCharstring {                   % w h -- charstring
  [ /pop cvx                            % w h mark pop
    3 index 0 0 0                       % w h mark pop w 0 0 0
    7 index 7 index /setcachedevice cvx 
                                % w h mark pop w 0 0 0 w h setcachedevice
    10 index 10 index /fillEuro load /exec cvx ] 
  cvx bind 3 1 roll pop pop
} def

/doEurifyFont {                         % oldname newname --
  exch
  findfont dup dup                      % newname dict dict dict
  /FontMatrix get matrix invertmatrix   % newname dict dict m
  {} forall pop pop [ 5 1 roll 0 0] makefont setfont   % newnamedict
  0 0 moveto
  (5) stringwidth pop                     % newname dict w
  (M) false charpath pathbbox 4 1 roll pop pop pop % newnamedict w h
  3 2 roll                                % newname w h dict
  
  dup length dict dup 3 1 roll begin      % newname w h newdict
    {1 index /FID ne {def} {pop pop} ifelse} forall
    CharStrings dup length 1 add dict dup 3 1 roll begin % newnamew h newdict newdict'
      {def} forall
      /Euro                               % newname w h newdict newdict' /Euro
      4 index 4 index makeEuroCharstring def
    end                                   % newname w h newdict newdict'
    /CharStrings exch def
  end
  3 1 roll pop pop                      % newname dict
  definefont pop
} bind def

end                                     % makeCompositeDict

% oldfontname newfontname baseEncoding targetEncoding compositeChars --
/makeComposite
{
  makeCompositeDict begin doMakeComposite end
} bind def

% oldfontname newfontname
/eurifyFont
{
  makeCompositeDict begin doEurifyFont end
} bind def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: font Courier-BoldOblique-Ogonki
/Courier-BoldOblique /Courier-BoldOblique-Ogonki OgonkiEncoding StandardEncoding 111 dict
dup /Agrave [65 -24 123 27] put
dup /Aring [65 16 123 31] put
dup /Atilde [65 -4 123 29] put
dup /Ecircumflex [69 26 123 28] put
dup /Egrave [69 26 123 27] put
dup /Gcaron [71 36 123 183] put
dup /Idieresis [73 26 123 168] put
dup /Igrave [73 26 123 27] put
dup /Ntilde [78 26 123 29] put
dup /Ograve [79 26 123 27] put
dup /Otilde [79 26 123 29] put
dup /Ucircumflex [85 26 123 28] put
dup /Ugrave [85 -4 123 27] put
dup /Ydieresis [89 26 123 168] put
dup /agrave [97 -30 0 27] put
dup /aring [97 0 0 31] put
dup /atilde [97 0 0 29] put
dup /ecircumflex [101 0 0 28] put
dup /egrave [101 0 0 27] put
dup /gcaron [103 -40 0 183] put
dup /idieresis [136 -40 0 168] put
dup /igrave [136 0 0 27] put
dup /ntilde [110 0 0 29] put
dup /ograve [111 0 0 27] put
dup /otilde [111 0 0 29] put
dup /ucircumflex [117 -20 0 28] put
dup /ugrave [117 -30 0 27] put
dup /ydieresis [121 10 0 168] put
dup /Abreve [65 -18 130 162] put
dup /abreve [97 0 0 162] put
dup /Amacron [65 -15 130 30] put
dup /amacron [97 0 0 30] put
dup /Aogonek [65 200 0 178] put
dup /aogonek [97 200 0 178] put
dup /cacute [99 0 0 180] put
dup /Cacute [67 30 130 180] put
dup /ccaron [99 0 0 183] put
dup /Ccaron [67 30 130 183] put
dup /ccircumflex [99 0 0 28] put
dup /Ccircumflex [67 30 130 28] put
dup /cdotaccent [99 0 0 255] put
dup /Cdotaccent [67 30 130 255] put
dup /dbar [100 200 250 173] put
dup /Dbar [208 0 0 160] put
dup /Dcaron [68 -12 130 183] put
dup /dcaron [100 35 178 183] put
dup /ecaron [101 0 0 183] put
dup /Ecaron [69 30 130 183] put
dup /edotaccent [101 0 0 255] put
dup /Edotaccent [69 30 130 255] put
dup /emacron [101 0 0 30] put
dup /Emacron [69 30 130 30] put
dup /Eogonek [69 0 0 178] put
dup /eogonek [101 0 0 178] put
dup /gacute [103 0 0 180] put
dup /gbreve [103 0 0 162] put
dup /Gbreve [71 30 130 162] put
dup /gcircumflex [103 0 0 28] put
dup /Gcircumflex [71 30 130 28] put
dup /gdotaccent [103 0 0 255] put
dup /Gdotaccent [71 30 130 255] put
dup /hcircumflex [104 0 178 28] put
dup /Hcircumflex [72 30 130 28] put
dup /Idotaccent [73 30 130 255] put
dup /imacron [136 0 0 30] put
dup /Imacron [73 30 130 30] put
dup /Iogonek [73 20 0 178] put
dup /iogonek [105 20 0 178] put
dup /itilde [136 0 0 29] put
dup /Itilde [73 30 130 29] put
dup /Jcircumflex [74 95 130 28] put
dup /Lacute [76 -88 130 180] put
dup /lacute [108 0 178 180] put
dup /Lcaron [76 -88 130 183] put
dup /lcaron [108 0 178 183] put
dup /nacute [110 0 0 180] put
dup /Nacute [78 30 130 180] put
dup /ncaron [110 0 0 183] put
dup /Ncaron [78 30 130 183] put
dup /ohungarumlaut [111 0 0 189] put
dup /Ohungarumlaut [79 30 130 189] put
dup /omacron [111 0 0 30] put
dup /Omacron [79 30 130 30] put
dup /racute [114 0 0 180] put
dup /Racute [82 30 130 180] put
dup /rcaron [114 0 0 183] put
dup /Rcaron [82 30 130 183] put
dup /sacute [115 0 0 180] put
dup /Sacute [83 30 130 180] put
dup /scircumflex [115 0 0 28] put
dup /Scircumflex [83 30 130 28] put
dup /tcaron [116 -59 106 183] put
dup /Tcaron [84 30 130 183] put
dup /Tcedilla [84 0 0 184] put
dup /tcedilla [116 0 0 184] put
dup /ubreve [117 0 0 162] put
dup /Ubreve [85 30 130 162] put
dup /uhungarumlaut [117 0 0 189] put
dup /Uhungarumlaut [85 30 130 189] put
dup /umacron [117 0 0 30] put
dup /Umacron [85 30 130 30] put
dup /Uogonek [85 0 7 178] put
dup /uogonek [117 108 0 178] put
dup /uring [117 0 0 31] put
dup /Uring [85 30 130 31] put
dup /utilde [117 0 0 29] put
dup /Utilde [85 30 130 29] put
dup /zacute [122 0 0 180] put
dup /Zacute [90 30 130 180] put
dup /zdotaccent [122 0 0 255] put
dup /Zdotaccent [90 30 130 255] put
makeComposite
%%EndResource

%%EndResource
%%BeginResource: font Courier-Oblique-Ogonki
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding OgonkiEncoding
/OgonkiEncoding [
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /quotesingle
/quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl /endash /dagger
/daggerdbl /periodcentered /paragraph /bullet /quotesinglbase /quotedblbase /quotedblright /guillemotright
/ellipsis /perthousand /questiondown /grave /circumflex /tilde /macron /ring
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /emdash /AE /ordfeminine /Oslash /OE /ordmasculine /ae
/dotlessi /oslash /oe /threesuperior /thorn /twosuperior /threequarters /Eth
/trademark /registered /onequarter /Thorn /logicalnot /plusminus /minus /onesuperior
/copyright /mu /eth /brokenbar /onehalf /dotlessj /Euro /.notdef
/space /Aogonek /breve /Lslash /currency /Lcaron /Sacute /section
/dieresis /Scaron /Scedilla /Tcaron /Zacute /hyphen /Zcaron /Zdotaccent
/degree /aogonek /ogonek /lslash /acute /lcaron /sacute /caron
/cedilla /scaron /scedilla /tcaron /zacute /hungarumlaut /zcaron /zdotaccent
% 300
/Racute /Aacute /Acircumflex /Abreve /Adieresis /Lacute /Cacute /Ccedilla
/Ccaron /Eacute /Eogonek /Edieresis /Ecaron /Iacute /Icircumflex /Dcaron
/Eth /Nacute /Ncaron /Oacute /Ocircumflex /Ohungarumlaut /Odieresis /multiply
/Rcaron /Uring /Uacute /Uhungarumlaut /Udieresis /Yacute /Tcedilla /germandbls
/racute /aacute /acircumflex /abreve /adieresis /lacute /cacute /ccedilla
/ccaron /eacute /eogonek /edieresis /ecaron /iacute /icircumflex /dcaron
/dbar /nacute /ncaron /oacute /ocircumflex /ohungarumlaut /odieresis /divide
/rcaron /uring /uacute /uhungarumlaut /udieresis /yacute /tcedilla /dotaccent
] def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding StandardEncoding
/StandardEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /section
/currency /quotesingle /quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl
/.notdef /endash /dagger /daggerdbl /periodcentered /.notdef /paragraph /bullet
/quotesinglbase /quotedblbase /quotedblright /guillemotright /ellipsis /perthousand /.notdef /questiondown
% 300
/.notdef /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/emdash /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /AE /.notdef /ordfeminine /.notdef /.notdef /.notdef /.notdef
/Lslash /Oslash /OE /ordmasculine /.notdef /.notdef /.notdef /.notdef
/.notdef /ae /.notdef /.notdef /.notdef /dotlessi /.notdef /.notdef
/lslash /oslash /oe /germandbls /.notdef /.notdef /.notdef /.notdef
] def
%%EndResource
%!
% Add composite (i.e. accented) characters to any font
% By J. Chroboczek <jec@dcs.ed.ac.uk>
%
% -- code follows this line --
%%BeginResource: procset compose 0.8 0
% Copyright (c) 1996-1999 by J. Chroboczek
% This code may be distributed under the terms of the 
% GNU Public License, either version 2 of the license, or (at your
% option) any later version.
/makeCompositeDict 20 dict def
makeCompositeDict begin
/nameUnique {                           % name nameUnique namexxxxxx
  dup length exch 1 index string cvs    % length (name)
  1 index 12 add string dup             % length (name) (...) (...)
  3 2 roll 0 exch putinterval           % length (name...)
  dup 3 2 roll
  rand 12 string cvs
  putinterval
} bind def

/doMakeComposite
{
  /compositeChars exch def
  /targetEncoding exch def
  /baseEncoding exch def
  /newfontname exch def
  /oldfontname exch def
  /oldfont oldfontname findfont def
  /newfont 20 dict def
  /oldFontMatrix oldfont /FontMatrix get def
  /oldFontBBox oldfont /FontBBox get cvlit def
  /oldfontcopy oldfont length dict def

  newfont begin
    /FontType 3 def
    /PaintType 0 def      % not used
    /FontMatrix [0.001 0 0 0.001 0 0] def
    /FontBBox
    [
      oldFontBBox 0 get oldFontBBox 1 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
      oldFontBBox 2 get oldFontBBox 3 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
    ] cvx def

    /StrokeWidth 0 def                  % not used

    /Encoding targetEncoding def

    /Decoding 256 dict def              % invert base encoding vector
    Decoding begin
      0 1 255
      { dup baseEncoding exch get exch def } bind for
    end

    newfont /compositeChars compositeChars put

    /FontName newfontname def

% make a copy of the original font, reencoding it
    oldfont
    oldfontcopy begin
      {1 index /FID ne
        {def}
        {pop pop} ifelse
      } bind forall
    end
    oldfontcopy /Encoding baseEncoding put
    oldfontname nameUnique oldfontcopy definefont
    1000 scalefont /OriginalFont exch def

    /BuildChar                          % newfont n BuildChar -
    {
      exch begin                        % n
        /OriginalFont load setfont
        /Encoding load exch get         % glyphName
        /compositeChars load dup
        2 index known                   % glyphName compositeChars known-p
        { 1 index get                   % glyphName [ 65 x y 129 ]
          dup 0 get ( ) dup             % glyphName [...] 65 ( ) ( )
          0 3 index put                 % glyphName [...] 65 (A)
          dup stringwidth setcharwidth
          0 0 moveto
          show pop                      % glyphName [...]
          dup 1 get 1 index 2 get       % glyphName [...] x y
          moveto                        % glyphName [...]
          3 get ( ) dup 3 2 roll        % glyphName ( ) ( ) 129
          0 exch put                    % glyphName (')
          show                          % glyphName
        }
        { pop
          /Decoding load                % glyphName Decoding
          dup 2 index known             % glyphName Decoding known-p
          { exch get }
          { pop pop 0 } ifelse          % n'
          ( ) dup 0 3 index put dup     % n' (A) (A)
          stringwidth setcharwidth
          0 0 moveto
          show                          % n'
        } ifelse
        pop
      end
    } bind def
  end                                   % newfont
  newfontname newfont definefont pop
} def                                   % doMakeComposite

/fillEuro {                             % w h --
  gsave exch 1000 div exch 1000 div scale
  955.852 232.172 moveto
  904.495 180.815 lineto
  829.454 117.848 734.626 83.333 636.667 83.333 curveto
  406.667 83.333 220 270 220 500 curveto
  220 730 406.667 916.667 636.667 916.667 curveto
  759.831 916.667 876.684 862.177 955.852 767.828 curveto
  988.474 855.291 lineto
  894.851 947.996 768.422 1000 636.667 1000 curveto
  360.667 1000 136.667 776 136.667 500 curveto
  136.667 224 360.667 0 636.667 0 curveto
  753.23 0 866.13 40.725 955.852 115.135 curveto
  closepath fill
  
  869.037 541.667 moveto
  901.025 625 lineto
  31.989 625 lineto
  0 541.667 lineto
  closepath fill
  
  805.059 375 moveto
  837.048 458.333 lineto
  31.989 458.333 lineto
  0 375 lineto
  closepath fill
  grestore
} bind def

/makeEuroCharstring {                   % w h -- charstring
  [ /pop cvx                            % w h mark pop
    3 index 0 0 0                       % w h mark pop w 0 0 0
    7 index 7 index /setcachedevice cvx 
                                % w h mark pop w 0 0 0 w h setcachedevice
    10 index 10 index /fillEuro load /exec cvx ] 
  cvx bind 3 1 roll pop pop
} def

/doEurifyFont {                         % oldname newname --
  exch
  findfont dup dup                      % newname dict dict dict
  /FontMatrix get matrix invertmatrix   % newname dict dict m
  {} forall pop pop [ 5 1 roll 0 0] makefont setfont   % newnamedict
  0 0 moveto
  (5) stringwidth pop                     % newname dict w
  (M) false charpath pathbbox 4 1 roll pop pop pop % newnamedict w h
  3 2 roll                                % newname w h dict
  
  dup length dict dup 3 1 roll begin      % newname w h newdict
    {1 index /FID ne {def} {pop pop} ifelse} forall
    CharStrings dup length 1 add dict dup 3 1 roll begin % newnamew h newdict newdict'
      {def} forall
      /Euro                               % newname w h newdict newdict' /Euro
      4 index 4 index makeEuroCharstring def
    end                                   % newname w h newdict newdict'
    /CharStrings exch def
  end
  3 1 roll pop pop                      % newname dict
  definefont pop
} bind def

end                                     % makeCompositeDict

% oldfontname newfontname baseEncoding targetEncoding compositeChars --
/makeComposite
{
  makeCompositeDict begin doMakeComposite end
} bind def

% oldfontname newfontname
/eurifyFont
{
  makeCompositeDict begin doEurifyFont end
} bind def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: font Courier-Oblique-Ogonki
/Courier-Oblique /Courier-Oblique-Ogonki OgonkiEncoding StandardEncoding 111 dict
dup /Agrave [65 -4 121 27] put
dup /Aring [65 12 126 31] put
dup /Atilde [65 27 126 29] put
dup /Ecircumflex [69 26 121 28] put
dup /Egrave [69 26 121 27] put
dup /Gcaron [71 29 136 183] put
dup /Idieresis [73 29 136 168] put
dup /Igrave [73 26 121 27] put
dup /Ntilde [78 27 126 29] put
dup /Ograve [79 26 121 27] put
dup /Otilde [79 27 126 29] put
dup /Ucircumflex [85 26 121 28] put
dup /Ugrave [85 -4 121 27] put
dup /Ydieresis [89 29 136 168] put
dup /agrave [97 0 0 27] put
dup /aring [97 0 0 31] put
dup /atilde [97 0 0 29] put
dup /ecircumflex [101 0 0 28] put
dup /egrave [101 0 0 27] put
dup /gcaron [103 -30 0 183] put
dup /idieresis [136 -30 0 168] put
dup /igrave [136 -30 0 27] put
dup /ntilde [110 0 0 29] put
dup /ograve [111 0 0 27] put
dup /otilde [111 0 0 29] put
dup /ucircumflex [117 -10 0 28] put
dup /ugrave [117 -30 0 27] put
dup /ydieresis [121 -10 0 168] put
dup /abreve [97 0 0 162] put
dup /Abreve [65 0 133 162] put
dup /amacron [97 0 0 30] put
dup /Amacron [65 0 133 30] put
dup /Aogonek [65 200 0 178] put
dup /aogonek [97 200 0 178] put
dup /cacute [99 0 0 180] put
dup /Cacute [67 53 133 180] put
dup /ccaron [99 0 0 183] put
dup /Ccaron [67 53 133 183] put
dup /ccircumflex [99 0 2 28] put
dup /Ccircumflex [67 53 133 28] put
dup /cdotaccent [99 0 0 255] put
dup /Cdotaccent [67 53 133 255] put
dup /dbar [100 200 250 173] put
dup /Dbar [208 0 0 160] put
dup /dcaron [100 20 182 183] put
dup /Dcaron [68 33 133 183] put
dup /ecaron [101 0 0 183] put
dup /Ecaron [69 53 133 183] put
dup /edotaccent [101 0 0 255] put
dup /Edotaccent [69 53 133 255] put
dup /emacron [101 0 0 30] put
dup /Emacron [69 53 133 30] put
dup /Eogonek [69 0 0 178] put
dup /eogonek [101 0 0 178] put
dup /gacute [103 -10 0 180] put
dup /gbreve [103 -10 0 162] put
dup /Gbreve [71 53 133 162] put
dup /gcircumflex [103 -10 0 28] put
dup /Gcircumflex [71 53 133 28] put
dup /gdotaccent [103 0 0 255] put
dup /Gdotaccent [71 53 186 255] put
dup /hcircumflex [104 0 182 28] put
dup /Hcircumflex [72 30 133 28] put
dup /Idotaccent [73 30 133 255] put
dup /imacron [136 0 0 30] put
dup /Imacron [73 30 133 30] put
dup /iogonek [105 20 0 178] put
dup /Iogonek [73 20 0 178] put
dup /itilde [136 0 0 29] put
dup /Itilde [73 30 133 29] put
dup /Jcircumflex [74 98 133 28] put
dup /Lacute [76 -83 133 180] put
dup /lacute [108 0 182 180] put
dup /Lcaron [76 -83 133 183] put
dup /lcaron [108 0 182 183] put
dup /nacute [110 0 0 180] put
dup /Nacute [78 53 133 180] put
dup /ncaron [110 0 0 183] put
dup /Ncaron [78 53 133 183] put
dup /ohungarumlaut [111 0 0 189] put
dup /Ohungarumlaut [79 53 133 189] put
dup /omacron [111 0 0 30] put
dup /Omacron [79 53 133 30] put
dup /racute [114 0 0 180] put
dup /Racute [82 53 133 180] put
dup /rcaron [114 0 0 183] put
dup /Rcaron [82 40 133 183] put
dup /sacute [115 0 0 180] put
dup /Sacute [83 53 133 180] put
dup /scircumflex [115 0 0 28] put
dup /Scircumflex [83 53 133 28] put
dup /tcaron [116 -65 118 183] put
dup /Tcaron [84 40 133 183] put
dup /Tcedilla [84 0 0 184] put
dup /tcedilla [116 0 0 184] put
dup /ubreve [117 0 0 162] put
dup /Ubreve [85 53 133 162] put
dup /uhungarumlaut [117 0 0 189] put
dup /Uhungarumlaut [85 53 133 189] put
dup /umacron [117 0 0 30] put
dup /Umacron [85 53 133 30] put
dup /uogonek [117 120 0 178] put
dup /Uogonek [85 5 15 178] put
dup /uring [117 -30 0 31] put
dup /Uring [85 53 133 31] put
dup /utilde [117 0 0 29] put
dup /Utilde [85 53 133 29] put
dup /zacute [122 0 0 180] put
dup /Zacute [90 40 133 180] put
dup /zdotaccent [122 0 0 255] put
dup /Zdotaccent [90 40 133 255] put
makeComposite
%%EndResource

%%EndResource
%%BeginResource: font Courier-Ogonki
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding OgonkiEncoding
/OgonkiEncoding [
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /quotesingle
/quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl /endash /dagger
/daggerdbl /periodcentered /paragraph /bullet /quotesinglbase /quotedblbase /quotedblright /guillemotright
/ellipsis /perthousand /questiondown /grave /circumflex /tilde /macron /ring
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /emdash /AE /ordfeminine /Oslash /OE /ordmasculine /ae
/dotlessi /oslash /oe /threesuperior /thorn /twosuperior /threequarters /Eth
/trademark /registered /onequarter /Thorn /logicalnot /plusminus /minus /onesuperior
/copyright /mu /eth /brokenbar /onehalf /dotlessj /Euro /.notdef
/space /Aogonek /breve /Lslash /currency /Lcaron /Sacute /section
/dieresis /Scaron /Scedilla /Tcaron /Zacute /hyphen /Zcaron /Zdotaccent
/degree /aogonek /ogonek /lslash /acute /lcaron /sacute /caron
/cedilla /scaron /scedilla /tcaron /zacute /hungarumlaut /zcaron /zdotaccent
% 300
/Racute /Aacute /Acircumflex /Abreve /Adieresis /Lacute /Cacute /Ccedilla
/Ccaron /Eacute /Eogonek /Edieresis /Ecaron /Iacute /Icircumflex /Dcaron
/Eth /Nacute /Ncaron /Oacute /Ocircumflex /Ohungarumlaut /Odieresis /multiply
/Rcaron /Uring /Uacute /Uhungarumlaut /Udieresis /Yacute /Tcedilla /germandbls
/racute /aacute /acircumflex /abreve /adieresis /lacute /cacute /ccedilla
/ccaron /eacute /eogonek /edieresis /ecaron /iacute /icircumflex /dcaron
/dbar /nacute /ncaron /oacute /ocircumflex /ohungarumlaut /odieresis /divide
/rcaron /uring /uacute /uhungarumlaut /udieresis /yacute /tcedilla /dotaccent
] def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding StandardEncoding
/StandardEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /section
/currency /quotesingle /quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl
/.notdef /endash /dagger /daggerdbl /periodcentered /.notdef /paragraph /bullet
/quotesinglbase /quotedblbase /quotedblright /guillemotright /ellipsis /perthousand /.notdef /questiondown
% 300
/.notdef /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/emdash /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /AE /.notdef /ordfeminine /.notdef /.notdef /.notdef /.notdef
/Lslash /Oslash /OE /ordmasculine /.notdef /.notdef /.notdef /.notdef
/.notdef /ae /.notdef /.notdef /.notdef /dotlessi /.notdef /.notdef
/lslash /oslash /oe /germandbls /.notdef /.notdef /.notdef /.notdef
] def
%%EndResource
%!
% Add composite (i.e. accented) characters to any font
% By J. Chroboczek <jec@dcs.ed.ac.uk>
%
% -- code follows this line --
%%BeginResource: procset compose 0.8 0
% Copyright (c) 1996-1999 by J. Chroboczek
% This code may be distributed under the terms of the 
% GNU Public License, either version 2 of the license, or (at your
% option) any later version.
/makeCompositeDict 20 dict def
makeCompositeDict begin
/nameUnique {                           % name nameUnique namexxxxxx
  dup length exch 1 index string cvs    % length (name)
  1 index 12 add string dup             % length (name) (...) (...)
  3 2 roll 0 exch putinterval           % length (name...)
  dup 3 2 roll
  rand 12 string cvs
  putinterval
} bind def

/doMakeComposite
{
  /compositeChars exch def
  /targetEncoding exch def
  /baseEncoding exch def
  /newfontname exch def
  /oldfontname exch def
  /oldfont oldfontname findfont def
  /newfont 20 dict def
  /oldFontMatrix oldfont /FontMatrix get def
  /oldFontBBox oldfont /FontBBox get cvlit def
  /oldfontcopy oldfont length dict def

  newfont begin
    /FontType 3 def
    /PaintType 0 def      % not used
    /FontMatrix [0.001 0 0 0.001 0 0] def
    /FontBBox
    [
      oldFontBBox 0 get oldFontBBox 1 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
      oldFontBBox 2 get oldFontBBox 3 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
    ] cvx def

    /StrokeWidth 0 def                  % not used

    /Encoding targetEncoding def

    /Decoding 256 dict def              % invert base encoding vector
    Decoding begin
      0 1 255
      { dup baseEncoding exch get exch def } bind for
    end

    newfont /compositeChars compositeChars put

    /FontName newfontname def

% make a copy of the original font, reencoding it
    oldfont
    oldfontcopy begin
      {1 index /FID ne
        {def}
        {pop pop} ifelse
      } bind forall
    end
    oldfontcopy /Encoding baseEncoding put
    oldfontname nameUnique oldfontcopy definefont
    1000 scalefont /OriginalFont exch def

    /BuildChar                          % newfont n BuildChar -
    {
      exch begin                        % n
        /OriginalFont load setfont
        /Encoding load exch get         % glyphName
        /compositeChars load dup
        2 index known                   % glyphName compositeChars known-p
        { 1 index get                   % glyphName [ 65 x y 129 ]
          dup 0 get ( ) dup             % glyphName [...] 65 ( ) ( )
          0 3 index put                 % glyphName [...] 65 (A)
          dup stringwidth setcharwidth
          0 0 moveto
          show pop                      % glyphName [...]
          dup 1 get 1 index 2 get       % glyphName [...] x y
          moveto                        % glyphName [...]
          3 get ( ) dup 3 2 roll        % glyphName ( ) ( ) 129
          0 exch put                    % glyphName (')
          show                          % glyphName
        }
        { pop
          /Decoding load                % glyphName Decoding
          dup 2 index known             % glyphName Decoding known-p
          { exch get }
          { pop pop 0 } ifelse          % n'
          ( ) dup 0 3 index put dup     % n' (A) (A)
          stringwidth setcharwidth
          0 0 moveto
          show                          % n'
        } ifelse
        pop
      end
    } bind def
  end                                   % newfont
  newfontname newfont definefont pop
} def                                   % doMakeComposite

/fillEuro {                             % w h --
  gsave exch 1000 div exch 1000 div scale
  955.852 232.172 moveto
  904.495 180.815 lineto
  829.454 117.848 734.626 83.333 636.667 83.333 curveto
  406.667 83.333 220 270 220 500 curveto
  220 730 406.667 916.667 636.667 916.667 curveto
  759.831 916.667 876.684 862.177 955.852 767.828 curveto
  988.474 855.291 lineto
  894.851 947.996 768.422 1000 636.667 1000 curveto
  360.667 1000 136.667 776 136.667 500 curveto
  136.667 224 360.667 0 636.667 0 curveto
  753.23 0 866.13 40.725 955.852 115.135 curveto
  closepath fill
  
  869.037 541.667 moveto
  901.025 625 lineto
  31.989 625 lineto
  0 541.667 lineto
  closepath fill
  
  805.059 375 moveto
  837.048 458.333 lineto
  31.989 458.333 lineto
  0 375 lineto
  closepath fill
  grestore
} bind def

/makeEuroCharstring {                   % w h -- charstring
  [ /pop cvx                            % w h mark pop
    3 index 0 0 0                       % w h mark pop w 0 0 0
    7 index 7 index /setcachedevice cvx 
                                % w h mark pop w 0 0 0 w h setcachedevice
    10 index 10 index /fillEuro load /exec cvx ] 
  cvx bind 3 1 roll pop pop
} def

/doEurifyFont {                         % oldname newname --
  exch
  findfont dup dup                      % newname dict dict dict
  /FontMatrix get matrix invertmatrix   % newname dict dict m
  {} forall pop pop [ 5 1 roll 0 0] makefont setfont   % newnamedict
  0 0 moveto
  (5) stringwidth pop                     % newname dict w
  (M) false charpath pathbbox 4 1 roll pop pop pop % newnamedict w h
  3 2 roll                                % newname w h dict
  
  dup length dict dup 3 1 roll begin      % newname w h newdict
    {1 index /FID ne {def} {pop pop} ifelse} forall
    CharStrings dup length 1 add dict dup 3 1 roll begin % newnamew h newdict newdict'
      {def} forall
      /Euro                               % newname w h newdict newdict' /Euro
      4 index 4 index makeEuroCharstring def
    end                                   % newname w h newdict newdict'
    /CharStrings exch def
  end
  3 1 roll pop pop                      % newname dict
  definefont pop
} bind def

end                                     % makeCompositeDict

% oldfontname newfontname baseEncoding targetEncoding compositeChars --
/makeComposite
{
  makeCompositeDict begin doMakeComposite end
} bind def

% oldfontname newfontname
/eurifyFont
{
  makeCompositeDict begin doEurifyFont end
} bind def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: font Courier-Ogonki
/Courier /Courier-Ogonki OgonkiEncoding StandardEncoding 111 dict
dup /Agrave [65 -30 121 27] put
dup /Aring [65 -15 126 31] put
dup /Atilde [65 0 126 29] put
dup /Ecircumflex [69 0 121 28] put
dup /Egrave [69 0 121 27] put
dup /Gcaron [71 0 136 183] put
dup /Idieresis [73 0 136 168] put
dup /Igrave [73 0 121 27] put
dup /Ntilde [78 0 126 29] put
dup /Ograve [79 0 121 27] put
dup /Otilde [79 0 126 29] put
dup /Ucircumflex [85 0 121 28] put
dup /Ugrave [85 -30 121 27] put
dup /Ydieresis [89 0 136 168] put
dup /agrave [97 0 0 27] put
dup /aring [97 0 0 31] put
dup /atilde [97 0 0 29] put
dup /ecircumflex [101 0 0 28] put
dup /egrave [101 0 0 27] put
dup /gcaron [103 -30 0 183] put
dup /idieresis [136 -30 0 168] put
dup /igrave [136 -30 0 27] put
dup /ntilde [110 0 0 29] put
dup /ograve [111 0 0 27] put
dup /otilde [111 0 0 29] put
dup /ucircumflex [117 -10 0 28] put
dup /ugrave [117 -30 0 27] put
dup /ydieresis [121 -10 0 168] put
dup /abreve [97 0 0 162] put
dup /Abreve [65 0 133 162] put
dup /amacron [97 0 0 30] put
dup /Amacron [65 0 133 30] put
dup /Aogonek [65 200 0 178] put
dup /aogonek [97 200 0 178] put
dup /cacute [99 17 0 180] put
dup /Cacute [67 30 133 180] put
dup /ccaron [99 17 0 183] put
dup /Ccaron [67 30 133 183] put
dup /ccircumflex [99 17 2 28] put
dup /Ccircumflex [67 30 133 28] put
dup /cdotaccent [99 0 0 255] put
dup /Cdotaccent [67 30 133 255] put
dup /dbar [100 200 250 173] put
dup /Dbar [208 0 0 160] put
dup /Dcaron [68 0 133 183] put
dup /dcaron [100 17 156 183] put
dup /ecaron [101 0 0 183] put
dup /Ecaron [69 0 133 183] put
dup /edotaccent [101 0 0 255] put
dup /Edotaccent [69 0 133 255] put
dup /Emacron [69 0 133 30] put
dup /emacron [101 17 0 30] put
dup /Eogonek [69 100 0 178] put
dup /eogonek [101 100 0 178] put
dup /gacute [103 0 0 180] put
dup /gbreve [103 0 0 162] put
dup /Gbreve [71 30 133 162] put
dup /gcircumflex [103 0 0 28] put
dup /Gcircumflex [71 30 133 28] put
dup /gdotaccent [103 0 0 255] put
dup /Gdotaccent [71 0 133 255] put
dup /Hcircumflex [72 0 133 28] put
dup /hcircumflex [104 0 164 28] put
dup /Idotaccent [73 0 133 255] put
dup /imacron [136 0 0 30] put
dup /Imacron [73 0 133 30] put
dup /iogonek [105 20 0 178] put
dup /Iogonek [73 20 0 178] put
dup /itilde [136 0 0 29] put
dup /Itilde [73 0 133 29] put
dup /Jcircumflex [74 100 133 28] put
dup /Lacute [76 -100 133 180] put
dup /lacute [108 -12 147 180] put
dup /Lcaron [76 -100 133 183] put
dup /lcaron [108 -12 144 183] put
dup /nacute [110 0 0 180] put
dup /Nacute [78 0 133 180] put
dup /ncaron [110 0 0 183] put
dup /Ncaron [78 0 133 183] put
dup /ohungarumlaut [111 0 0 189] put
dup /Ohungarumlaut [79 0 133 189] put
dup /omacron [111 0 0 30] put
dup /Omacron [79 0 133 30] put
dup /racute [114 0 0 180] put
dup /Racute [82 0 133 180] put
dup /rcaron [114 0 0 183] put
dup /Rcaron [82 0 133 183] put
dup /sacute [115 0 0 180] put
dup /Sacute [83 0 133 180] put
dup /scircumflex [115 0 0 28] put
dup /Scircumflex [83 0 133 28] put
dup /tcaron [116 -77 92 183] put
dup /Tcaron [84 0 133 183] put
dup /Tcedilla [84 0 0 184] put
dup /tcedilla [116 0 0 184] put
dup /ubreve [117 0 0 162] put
dup /Ubreve [85 0 133 162] put
dup /uhungarumlaut [117 0 0 189] put
dup /Uhungarumlaut [85 0 133 189] put
dup /umacron [117 0 0 30] put
dup /Umacron [85 0 133 30] put
dup /uogonek [117 120 0 178] put
dup /Uogonek [85 5 20 178] put
dup /uring [117 0 0 31] put
dup /Uring [85 0 133 31] put
dup /utilde [117 0 0 29] put
dup /Utilde [85 0 133 29] put
dup /zacute [122 0 0 180] put
dup /Zacute [90 0 133 180] put
dup /zdotaccent [122 0 0 255] put
dup /Zdotaccent [90 0 133 255] put
makeComposite
%%EndResource

%%EndResource
%%BeginResource: font Helvetica-Bold-Ogonki
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding OgonkiEncoding
/OgonkiEncoding [
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /quotesingle
/quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl /endash /dagger
/daggerdbl /periodcentered /paragraph /bullet /quotesinglbase /quotedblbase /quotedblright /guillemotright
/ellipsis /perthousand /questiondown /grave /circumflex /tilde /macron /ring
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /emdash /AE /ordfeminine /Oslash /OE /ordmasculine /ae
/dotlessi /oslash /oe /threesuperior /thorn /twosuperior /threequarters /Eth
/trademark /registered /onequarter /Thorn /logicalnot /plusminus /minus /onesuperior
/copyright /mu /eth /brokenbar /onehalf /dotlessj /Euro /.notdef
/space /Aogonek /breve /Lslash /currency /Lcaron /Sacute /section
/dieresis /Scaron /Scedilla /Tcaron /Zacute /hyphen /Zcaron /Zdotaccent
/degree /aogonek /ogonek /lslash /acute /lcaron /sacute /caron
/cedilla /scaron /scedilla /tcaron /zacute /hungarumlaut /zcaron /zdotaccent
% 300
/Racute /Aacute /Acircumflex /Abreve /Adieresis /Lacute /Cacute /Ccedilla
/Ccaron /Eacute /Eogonek /Edieresis /Ecaron /Iacute /Icircumflex /Dcaron
/Eth /Nacute /Ncaron /Oacute /Ocircumflex /Ohungarumlaut /Odieresis /multiply
/Rcaron /Uring /Uacute /Uhungarumlaut /Udieresis /Yacute /Tcedilla /germandbls
/racute /aacute /acircumflex /abreve /adieresis /lacute /cacute /ccedilla
/ccaron /eacute /eogonek /edieresis /ecaron /iacute /icircumflex /dcaron
/dbar /nacute /ncaron /oacute /ocircumflex /ohungarumlaut /odieresis /divide
/rcaron /uring /uacute /uhungarumlaut /udieresis /yacute /tcedilla /dotaccent
] def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding StandardEncoding
/StandardEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /section
/currency /quotesingle /quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl
/.notdef /endash /dagger /daggerdbl /periodcentered /.notdef /paragraph /bullet
/quotesinglbase /quotedblbase /quotedblright /guillemotright /ellipsis /perthousand /.notdef /questiondown
% 300
/.notdef /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/emdash /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /AE /.notdef /ordfeminine /.notdef /.notdef /.notdef /.notdef
/Lslash /Oslash /OE /ordmasculine /.notdef /.notdef /.notdef /.notdef
/.notdef /ae /.notdef /.notdef /.notdef /dotlessi /.notdef /.notdef
/lslash /oslash /oe /germandbls /.notdef /.notdef /.notdef /.notdef
] def
%%EndResource
%!
% Add composite (i.e. accented) characters to any font
% By J. Chroboczek <jec@dcs.ed.ac.uk>
%
% -- code follows this line --
%%BeginResource: procset compose 0.8 0
% Copyright (c) 1996-1999 by J. Chroboczek
% This code may be distributed under the terms of the 
% GNU Public License, either version 2 of the license, or (at your
% option) any later version.
/makeCompositeDict 20 dict def
makeCompositeDict begin
/nameUnique {                           % name nameUnique namexxxxxx
  dup length exch 1 index string cvs    % length (name)
  1 index 12 add string dup             % length (name) (...) (...)
  3 2 roll 0 exch putinterval           % length (name...)
  dup 3 2 roll
  rand 12 string cvs
  putinterval
} bind def

/doMakeComposite
{
  /compositeChars exch def
  /targetEncoding exch def
  /baseEncoding exch def
  /newfontname exch def
  /oldfontname exch def
  /oldfont oldfontname findfont def
  /newfont 20 dict def
  /oldFontMatrix oldfont /FontMatrix get def
  /oldFontBBox oldfont /FontBBox get cvlit def
  /oldfontcopy oldfont length dict def

  newfont begin
    /FontType 3 def
    /PaintType 0 def      % not used
    /FontMatrix [0.001 0 0 0.001 0 0] def
    /FontBBox
    [
      oldFontBBox 0 get oldFontBBox 1 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
      oldFontBBox 2 get oldFontBBox 3 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
    ] cvx def

    /StrokeWidth 0 def                  % not used

    /Encoding targetEncoding def

    /Decoding 256 dict def              % invert base encoding vector
    Decoding begin
      0 1 255
      { dup baseEncoding exch get exch def } bind for
    end

    newfont /compositeChars compositeChars put

    /FontName newfontname def

% make a copy of the original font, reencoding it
    oldfont
    oldfontcopy begin
      {1 index /FID ne
        {def}
        {pop pop} ifelse
      } bind forall
    end
    oldfontcopy /Encoding baseEncoding put
    oldfontname nameUnique oldfontcopy definefont
    1000 scalefont /OriginalFont exch def

    /BuildChar                          % newfont n BuildChar -
    {
      exch begin                        % n
        /OriginalFont load setfont
        /Encoding load exch get         % glyphName
        /compositeChars load dup
        2 index known                   % glyphName compositeChars known-p
        { 1 index get                   % glyphName [ 65 x y 129 ]
          dup 0 get ( ) dup             % glyphName [...] 65 ( ) ( )
          0 3 index put                 % glyphName [...] 65 (A)
          dup stringwidth setcharwidth
          0 0 moveto
          show pop                      % glyphName [...]
          dup 1 get 1 index 2 get       % glyphName [...] x y
          moveto                        % glyphName [...]
          3 get ( ) dup 3 2 roll        % glyphName ( ) ( ) 129
          0 exch put                    % glyphName (')
          show                          % glyphName
        }
        { pop
          /Decoding load                % glyphName Decoding
          dup 2 index known             % glyphName Decoding known-p
          { exch get }
          { pop pop 0 } ifelse          % n'
          ( ) dup 0 3 index put dup     % n' (A) (A)
          stringwidth setcharwidth
          0 0 moveto
          show                          % n'
        } ifelse
        pop
      end
    } bind def
  end                                   % newfont
  newfontname newfont definefont pop
} def                                   % doMakeComposite

/fillEuro {                             % w h --
  gsave exch 1000 div exch 1000 div scale
  955.852 232.172 moveto
  904.495 180.815 lineto
  829.454 117.848 734.626 83.333 636.667 83.333 curveto
  406.667 83.333 220 270 220 500 curveto
  220 730 406.667 916.667 636.667 916.667 curveto
  759.831 916.667 876.684 862.177 955.852 767.828 curveto
  988.474 855.291 lineto
  894.851 947.996 768.422 1000 636.667 1000 curveto
  360.667 1000 136.667 776 136.667 500 curveto
  136.667 224 360.667 0 636.667 0 curveto
  753.23 0 866.13 40.725 955.852 115.135 curveto
  closepath fill
  
  869.037 541.667 moveto
  901.025 625 lineto
  31.989 625 lineto
  0 541.667 lineto
  closepath fill
  
  805.059 375 moveto
  837.048 458.333 lineto
  31.989 458.333 lineto
  0 375 lineto
  closepath fill
  grestore
} bind def

/makeEuroCharstring {                   % w h -- charstring
  [ /pop cvx                            % w h mark pop
    3 index 0 0 0                       % w h mark pop w 0 0 0
    7 index 7 index /setcachedevice cvx 
                                % w h mark pop w 0 0 0 w h setcachedevice
    10 index 10 index /fillEuro load /exec cvx ] 
  cvx bind 3 1 roll pop pop
} def

/doEurifyFont {                         % oldname newname --
  exch
  findfont dup dup                      % newname dict dict dict
  /FontMatrix get matrix invertmatrix   % newname dict dict m
  {} forall pop pop [ 5 1 roll 0 0] makefont setfont   % newnamedict
  0 0 moveto
  (5) stringwidth pop                     % newname dict w
  (M) false charpath pathbbox 4 1 roll pop pop pop % newnamedict w h
  3 2 roll                                % newname w h dict
  
  dup length dict dup 3 1 roll begin      % newname w h newdict
    {1 index /FID ne {def} {pop pop} ifelse} forall
    CharStrings dup length 1 add dict dup 3 1 roll begin % newnamew h newdict newdict'
      {def} forall
      /Euro                               % newname w h newdict newdict' /Euro
      4 index 4 index makeEuroCharstring def
    end                                   % newname w h newdict newdict'
    /CharStrings exch def
  end
  3 1 roll pop pop                      % newname dict
  definefont pop
} bind def

end                                     % makeCompositeDict

% oldfontname newfontname baseEncoding targetEncoding compositeChars --
/makeComposite
{
  makeCompositeDict begin doMakeComposite end
} bind def

% oldfontname newfontname
/eurifyFont
{
  makeCompositeDict begin doEurifyFont end
} bind def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: font Helvetica-Bold-Ogonki
/Helvetica-Bold /Helvetica-Bold-Ogonki OgonkiEncoding StandardEncoding 83 dict
dup /Ydieresis [89 167 191 168] put
dup /ydieresis [121 111 0 168] put
dup /Ucircumflex [85 197 191 28] put
dup /Ugrave [85 197 191 27] put
dup /ucircumflex [117 139 0 28] put
dup /ugrave [117 139 0 27] put
dup /Idieresis [73 -27 191 168] put
dup /Igrave [73 -27 191 27] put
dup /idieresis [136 -27 0 168] put
dup /igrave [136 -27 0 27] put
dup /Ecircumflex [69 188 191 28] put
dup /Egrave [69 188 191 27] put
dup /ecircumflex [101 111 0 28] put
dup /egrave [101 111 0 27] put
dup /Agrave [65 197 191 27] put
dup /agrave [97 111 0 27] put
dup /Ograve [79 222 191 27] put
dup /ograve [111 139 0 27] put
dup /Atilde [65 197 191 29] put
dup /atilde [97 111 0 29] put
dup /Ntilde [78 200 191 29] put
dup /ntilde [110 146 0 29] put
dup /Otilde [79 222 191 29] put
dup /otilde [111 139 0 29] put
dup /Aring [65 197 191 31] put
dup /aring [97 111 0 31] put
dup /abreve [97 111 0 162] put
dup /Abreve [65 194 202 162] put
dup /aogonek [97 270 0 178] put
dup /Aogonek [65 444 0 178] put
dup /cacute [99 111 0 180] put
dup /Cacute [67 194 193 180] put
dup /ccaron [99 122 0 183] put
dup /Ccaron [67 210 191 183] put
dup /dbar [100 302 298 173] put
dup /Dbar [208 0 0 160] put
dup /dcaron [100 493 73 39] put
dup /Dcaron [68 194 190 183] put
dup /ecaron [101 111 0 183] put
dup /Ecaron [69 167 190 183] put
dup /edotaccent [101 103 0 255] put
dup /Edotaccent [69 188 191 255] put
dup /eogonek [101 150 0 178] put
dup /Eogonek [69 290 0 178] put
dup /gbreve [103 139 0 162] put
dup /Gbreve [71 222 191 162] put
dup /Idotaccent [73 -27 191 255] put
dup /iogonek [105 -39 0 178] put
dup /Iogonek [73 -30 0 178] put
dup /lacute [108 -7 193 180] put
dup /Lacute [76 139 193 180] put
dup /lcaron [108 155 73 39] put
dup /Lcaron [76 161 73 39] put
dup /nacute [110 159 0 180] put
dup /Nacute [78 231 193 180] put
dup /ncaron [110 111 0 183] put
dup /Ncaron [78 194 215 183] put
dup /ohungarumlaut [111 139 0 189] put
dup /Ohungarumlaut [79 222 191 189] put
dup /racute [114 48 0 180] put
dup /Racute [82 231 193 180] put
dup /rcaron [114 28 0 183] put
dup /Rcaron [82 194 190 183] put
dup /sacute [115 111 0 180] put
dup /Sacute [83 167 193 180] put
dup /scedilla [115 111 0 184] put
dup /Scedilla [83 167 0 184] put
dup /tcaron [116 249 0 39] put
dup /Tcaron [84 139 190 183] put
dup /tcedilla [116 86 0 184] put
dup /Tcedilla [84 197 0 184] put
dup /uhungarumlaut [117 139 0 189] put
dup /Uhungarumlaut [85 197 191 189] put
dup /uring [117 139 0 31] put
dup /Uring [85 194 190 31] put
dup /umacron [117 139 0 30] put
dup /Umacron [85 199 191 30] put
dup /uogonek [117 286 0 178] put
dup /Uogonek [85 260 0 178] put
dup /zacute [122 103 0 180] put
dup /Zacute [90 139 193 180] put
dup /zdotaccent [122 83 0 255] put
dup /Zdotaccent [90 139 206 255] put
makeComposite
%%EndResource

%%EndResource
%%BeginResource: font Helvetica-Ogonki
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding OgonkiEncoding
/OgonkiEncoding [
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /quotesingle
/quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl /endash /dagger
/daggerdbl /periodcentered /paragraph /bullet /quotesinglbase /quotedblbase /quotedblright /guillemotright
/ellipsis /perthousand /questiondown /grave /circumflex /tilde /macron /ring
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /emdash /AE /ordfeminine /Oslash /OE /ordmasculine /ae
/dotlessi /oslash /oe /threesuperior /thorn /twosuperior /threequarters /Eth
/trademark /registered /onequarter /Thorn /logicalnot /plusminus /minus /onesuperior
/copyright /mu /eth /brokenbar /onehalf /dotlessj /Euro /.notdef
/space /Aogonek /breve /Lslash /currency /Lcaron /Sacute /section
/dieresis /Scaron /Scedilla /Tcaron /Zacute /hyphen /Zcaron /Zdotaccent
/degree /aogonek /ogonek /lslash /acute /lcaron /sacute /caron
/cedilla /scaron /scedilla /tcaron /zacute /hungarumlaut /zcaron /zdotaccent
% 300
/Racute /Aacute /Acircumflex /Abreve /Adieresis /Lacute /Cacute /Ccedilla
/Ccaron /Eacute /Eogonek /Edieresis /Ecaron /Iacute /Icircumflex /Dcaron
/Eth /Nacute /Ncaron /Oacute /Ocircumflex /Ohungarumlaut /Odieresis /multiply
/Rcaron /Uring /Uacute /Uhungarumlaut /Udieresis /Yacute /Tcedilla /germandbls
/racute /aacute /acircumflex /abreve /adieresis /lacute /cacute /ccedilla
/ccaron /eacute /eogonek /edieresis /ecaron /iacute /icircumflex /dcaron
/dbar /nacute /ncaron /oacute /ocircumflex /ohungarumlaut /odieresis /divide
/rcaron /uring /uacute /uhungarumlaut /udieresis /yacute /tcedilla /dotaccent
] def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding StandardEncoding
/StandardEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /section
/currency /quotesingle /quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl
/.notdef /endash /dagger /daggerdbl /periodcentered /.notdef /paragraph /bullet
/quotesinglbase /quotedblbase /quotedblright /guillemotright /ellipsis /perthousand /.notdef /questiondown
% 300
/.notdef /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/emdash /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /AE /.notdef /ordfeminine /.notdef /.notdef /.notdef /.notdef
/Lslash /Oslash /OE /ordmasculine /.notdef /.notdef /.notdef /.notdef
/.notdef /ae /.notdef /.notdef /.notdef /dotlessi /.notdef /.notdef
/lslash /oslash /oe /germandbls /.notdef /.notdef /.notdef /.notdef
] def
%%EndResource
%!
% Add composite (i.e. accented) characters to any font
% By J. Chroboczek <jec@dcs.ed.ac.uk>
%
% -- code follows this line --
%%BeginResource: procset compose 0.8 0
% Copyright (c) 1996-1999 by J. Chroboczek
% This code may be distributed under the terms of the 
% GNU Public License, either version 2 of the license, or (at your
% option) any later version.
/makeCompositeDict 20 dict def
makeCompositeDict begin
/nameUnique {                           % name nameUnique namexxxxxx
  dup length exch 1 index string cvs    % length (name)
  1 index 12 add string dup             % length (name) (...) (...)
  3 2 roll 0 exch putinterval           % length (name...)
  dup 3 2 roll
  rand 12 string cvs
  putinterval
} bind def

/doMakeComposite
{
  /compositeChars exch def
  /targetEncoding exch def
  /baseEncoding exch def
  /newfontname exch def
  /oldfontname exch def
  /oldfont oldfontname findfont def
  /newfont 20 dict def
  /oldFontMatrix oldfont /FontMatrix get def
  /oldFontBBox oldfont /FontBBox get cvlit def
  /oldfontcopy oldfont length dict def

  newfont begin
    /FontType 3 def
    /PaintType 0 def      % not used
    /FontMatrix [0.001 0 0 0.001 0 0] def
    /FontBBox
    [
      oldFontBBox 0 get oldFontBBox 1 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
      oldFontBBox 2 get oldFontBBox 3 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
    ] cvx def

    /StrokeWidth 0 def                  % not used

    /Encoding targetEncoding def

    /Decoding 256 dict def              % invert base encoding vector
    Decoding begin
      0 1 255
      { dup baseEncoding exch get exch def } bind for
    end

    newfont /compositeChars compositeChars put

    /FontName newfontname def

% make a copy of the original font, reencoding it
    oldfont
    oldfontcopy begin
      {1 index /FID ne
        {def}
        {pop pop} ifelse
      } bind forall
    end
    oldfontcopy /Encoding baseEncoding put
    oldfontname nameUnique oldfontcopy definefont
    1000 scalefont /OriginalFont exch def

    /BuildChar                          % newfont n BuildChar -
    {
      exch begin                        % n
        /OriginalFont load setfont
        /Encoding load exch get         % glyphName
        /compositeChars load dup
        2 index known                   % glyphName compositeChars known-p
        { 1 index get                   % glyphName [ 65 x y 129 ]
          dup 0 get ( ) dup             % glyphName [...] 65 ( ) ( )
          0 3 index put                 % glyphName [...] 65 (A)
          dup stringwidth setcharwidth
          0 0 moveto
          show pop                      % glyphName [...]
          dup 1 get 1 index 2 get       % glyphName [...] x y
          moveto                        % glyphName [...]
          3 get ( ) dup 3 2 roll        % glyphName ( ) ( ) 129
          0 exch put                    % glyphName (')
          show                          % glyphName
        }
        { pop
          /Decoding load                % glyphName Decoding
          dup 2 index known             % glyphName Decoding known-p
          { exch get }
          { pop pop 0 } ifelse          % n'
          ( ) dup 0 3 index put dup     % n' (A) (A)
          stringwidth setcharwidth
          0 0 moveto
          show                          % n'
        } ifelse
        pop
      end
    } bind def
  end                                   % newfont
  newfontname newfont definefont pop
} def                                   % doMakeComposite

/fillEuro {                             % w h --
  gsave exch 1000 div exch 1000 div scale
  955.852 232.172 moveto
  904.495 180.815 lineto
  829.454 117.848 734.626 83.333 636.667 83.333 curveto
  406.667 83.333 220 270 220 500 curveto
  220 730 406.667 916.667 636.667 916.667 curveto
  759.831 916.667 876.684 862.177 955.852 767.828 curveto
  988.474 855.291 lineto
  894.851 947.996 768.422 1000 636.667 1000 curveto
  360.667 1000 136.667 776 136.667 500 curveto
  136.667 224 360.667 0 636.667 0 curveto
  753.23 0 866.13 40.725 955.852 115.135 curveto
  closepath fill
  
  869.037 541.667 moveto
  901.025 625 lineto
  31.989 625 lineto
  0 541.667 lineto
  closepath fill
  
  805.059 375 moveto
  837.048 458.333 lineto
  31.989 458.333 lineto
  0 375 lineto
  closepath fill
  grestore
} bind def

/makeEuroCharstring {                   % w h -- charstring
  [ /pop cvx                            % w h mark pop
    3 index 0 0 0                       % w h mark pop w 0 0 0
    7 index 7 index /setcachedevice cvx 
                                % w h mark pop w 0 0 0 w h setcachedevice
    10 index 10 index /fillEuro load /exec cvx ] 
  cvx bind 3 1 roll pop pop
} def

/doEurifyFont {                         % oldname newname --
  exch
  findfont dup dup                      % newname dict dict dict
  /FontMatrix get matrix invertmatrix   % newname dict dict m
  {} forall pop pop [ 5 1 roll 0 0] makefont setfont   % newnamedict
  0 0 moveto
  (5) stringwidth pop                     % newname dict w
  (M) false charpath pathbbox 4 1 roll pop pop pop % newnamedict w h
  3 2 roll                                % newname w h dict
  
  dup length dict dup 3 1 roll begin      % newname w h newdict
    {1 index /FID ne {def} {pop pop} ifelse} forall
    CharStrings dup length 1 add dict dup 3 1 roll begin % newnamew h newdict newdict'
      {def} forall
      /Euro                               % newname w h newdict newdict' /Euro
      4 index 4 index makeEuroCharstring def
    end                                   % newname w h newdict newdict'
    /CharStrings exch def
  end
  3 1 roll pop pop                      % newname dict
  definefont pop
} bind def

end                                     % makeCompositeDict

% oldfontname newfontname baseEncoding targetEncoding compositeChars --
/makeComposite
{
  makeCompositeDict begin doMakeComposite end
} bind def

% oldfontname newfontname
/eurifyFont
{
  makeCompositeDict begin doEurifyFont end
} bind def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: font Helvetica-Ogonki
/Helvetica /Helvetica-Ogonki OgonkiEncoding StandardEncoding 83 dict
dup /Ydieresis [89 167 199 168] put
dup /ydieresis [121 83 0 168] put
dup /Ucircumflex [85 194 199 28] put
dup /Ugrave [85 194 199 27] put
dup /ucircumflex [117 111 0 28] put
dup /ugrave [117 111 0 27] put
dup /Idieresis [73 -21 199 168] put
dup /Igrave [73 -21 199 27] put
dup /idieresis [136 -27 0 168] put
dup /igrave [136 -27 0 27] put
dup /Ecircumflex [69 188 199 28] put
dup /Egrave [69 188 199 27] put
dup /ecircumflex [101 117 0 28] put
dup /egrave [101 117 0 27] put
dup /Agrave [65 167 199 27] put
dup /agrave [97 111 0 27] put
dup /Ograve [79 222 199 27] put
dup /ograve [111 111 0 27] put
dup /Atilde [65 167 199 29] put
dup /atilde [97 111 0 29] put
dup /Ntilde [78 200 199 29] put
dup /ntilde [110 117 0 29] put
dup /Otilde [79 222 199 29] put
dup /otilde [111 111 0 29] put
dup /Aring [65 167 199 31] put
dup /aring [97 111 0 31] put
dup /abreve [97 96 0 162] put
dup /Abreve [65 174 195 162] put
dup /aogonek [97 270 0 178] put
dup /Aogonek [65 424 0 178] put
dup /cacute [99 84 0 180] put
dup /Cacute [67 196 195 180] put
dup /ccaron [99 84 0 183] put
dup /Ccaron [67 196 195 183] put
dup /dbar [100 270 330 173] put
dup /Dbar [208 0 0 160] put
dup /dcaron [100 523 0 39] put
dup /Dcaron [68 102 195 183] put
dup /ecaron [101 93 0 183] put
dup /Ecaron [69 102 195 183] put
dup /edotaccent [101 111 0 255] put
dup /Edotaccent [69 188 199 255] put
dup /eogonek [101 150 0 178] put
dup /Eogonek [69 290 0 178] put
dup /gbreve [103 111 0 162] put
dup /Gbreve [71 222 199 162] put
dup /Idotaccent [73 -21 199 255] put
dup /iogonek [105 -75 0 178] put
dup /Iogonek [73 -30 0 178] put
dup /lacute [108 -27 195 180] put
dup /Lacute [76 -27 195 180] put
dup /lcaron [108 169 0 39] put
dup /Lcaron [76 276 0 39] put
dup /nacute [110 160 0 180] put
dup /Nacute [78 220 195 180] put
dup /ncaron [110 70 0 183] put
dup /Ncaron [78 160 195 183] put
dup /ohungarumlaut [111 112 0 189] put
dup /Ohungarumlaut [79 223 195 189] put
dup /racute [114 25 0 180] put
dup /Racute [82 200 195 180] put
dup /rcaron [114 0 0 183] put
dup /Rcaron [82 100 195 183] put
dup /sacute [115 84 0 180] put
dup /Sacute [83 167 195 180] put
dup /scedilla [115 83 0 184] put
dup /Scedilla [83 167 0 184] put
dup /tcaron [116 291 0 39] put
dup /Tcaron [84 165 195 183] put
dup /tcedilla [116 84 0 184] put
dup /Tcedilla [84 185 0 184] put
dup /uhungarumlaut [117 112 0 189] put
dup /Uhungarumlaut [85 195 195 189] put
dup /umacron [117 111 0 30] put
dup /Umacron [85 194 199 30] put
dup /uogonek [117 255 0 178] put
dup /Uogonek [85 288 5 178] put
dup /uring [117 112 0 31] put
dup /Uring [85 195 195 31] put
dup /zacute [122 84 0 180] put
dup /Zacute [90 139 195 180] put
dup /zdotaccent [122 84 0 255] put
dup /Zdotaccent [90 139 195 255] put
makeComposite
%%EndResource

%%EndResource
%%BeginResource: font Times-Bold-Ogonki
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding OgonkiEncoding
/OgonkiEncoding [
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /quotesingle
/quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl /endash /dagger
/daggerdbl /periodcentered /paragraph /bullet /quotesinglbase /quotedblbase /quotedblright /guillemotright
/ellipsis /perthousand /questiondown /grave /circumflex /tilde /macron /ring
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /emdash /AE /ordfeminine /Oslash /OE /ordmasculine /ae
/dotlessi /oslash /oe /threesuperior /thorn /twosuperior /threequarters /Eth
/trademark /registered /onequarter /Thorn /logicalnot /plusminus /minus /onesuperior
/copyright /mu /eth /brokenbar /onehalf /dotlessj /Euro /.notdef
/space /Aogonek /breve /Lslash /currency /Lcaron /Sacute /section
/dieresis /Scaron /Scedilla /Tcaron /Zacute /hyphen /Zcaron /Zdotaccent
/degree /aogonek /ogonek /lslash /acute /lcaron /sacute /caron
/cedilla /scaron /scedilla /tcaron /zacute /hungarumlaut /zcaron /zdotaccent
% 300
/Racute /Aacute /Acircumflex /Abreve /Adieresis /Lacute /Cacute /Ccedilla
/Ccaron /Eacute /Eogonek /Edieresis /Ecaron /Iacute /Icircumflex /Dcaron
/Eth /Nacute /Ncaron /Oacute /Ocircumflex /Ohungarumlaut /Odieresis /multiply
/Rcaron /Uring /Uacute /Uhungarumlaut /Udieresis /Yacute /Tcedilla /germandbls
/racute /aacute /acircumflex /abreve /adieresis /lacute /cacute /ccedilla
/ccaron /eacute /eogonek /edieresis /ecaron /iacute /icircumflex /dcaron
/dbar /nacute /ncaron /oacute /ocircumflex /ohungarumlaut /odieresis /divide
/rcaron /uring /uacute /uhungarumlaut /udieresis /yacute /tcedilla /dotaccent
] def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding StandardEncoding
/StandardEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /section
/currency /quotesingle /quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl
/.notdef /endash /dagger /daggerdbl /periodcentered /.notdef /paragraph /bullet
/quotesinglbase /quotedblbase /quotedblright /guillemotright /ellipsis /perthousand /.notdef /questiondown
% 300
/.notdef /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/emdash /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /AE /.notdef /ordfeminine /.notdef /.notdef /.notdef /.notdef
/Lslash /Oslash /OE /ordmasculine /.notdef /.notdef /.notdef /.notdef
/.notdef /ae /.notdef /.notdef /.notdef /dotlessi /.notdef /.notdef
/lslash /oslash /oe /germandbls /.notdef /.notdef /.notdef /.notdef
] def
%%EndResource
%!
% Add composite (i.e. accented) characters to any font
% By J. Chroboczek <jec@dcs.ed.ac.uk>
%
% -- code follows this line --
%%BeginResource: procset compose 0.8 0
% Copyright (c) 1996-1999 by J. Chroboczek
% This code may be distributed under the terms of the 
% GNU Public License, either version 2 of the license, or (at your
% option) any later version.
/makeCompositeDict 20 dict def
makeCompositeDict begin
/nameUnique {                           % name nameUnique namexxxxxx
  dup length exch 1 index string cvs    % length (name)
  1 index 12 add string dup             % length (name) (...) (...)
  3 2 roll 0 exch putinterval           % length (name...)
  dup 3 2 roll
  rand 12 string cvs
  putinterval
} bind def

/doMakeComposite
{
  /compositeChars exch def
  /targetEncoding exch def
  /baseEncoding exch def
  /newfontname exch def
  /oldfontname exch def
  /oldfont oldfontname findfont def
  /newfont 20 dict def
  /oldFontMatrix oldfont /FontMatrix get def
  /oldFontBBox oldfont /FontBBox get cvlit def
  /oldfontcopy oldfont length dict def

  newfont begin
    /FontType 3 def
    /PaintType 0 def      % not used
    /FontMatrix [0.001 0 0 0.001 0 0] def
    /FontBBox
    [
      oldFontBBox 0 get oldFontBBox 1 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
      oldFontBBox 2 get oldFontBBox 3 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
    ] cvx def

    /StrokeWidth 0 def                  % not used

    /Encoding targetEncoding def

    /Decoding 256 dict def              % invert base encoding vector
    Decoding begin
      0 1 255
      { dup baseEncoding exch get exch def } bind for
    end

    newfont /compositeChars compositeChars put

    /FontName newfontname def

% make a copy of the original font, reencoding it
    oldfont
    oldfontcopy begin
      {1 index /FID ne
        {def}
        {pop pop} ifelse
      } bind forall
    end
    oldfontcopy /Encoding baseEncoding put
    oldfontname nameUnique oldfontcopy definefont
    1000 scalefont /OriginalFont exch def

    /BuildChar                          % newfont n BuildChar -
    {
      exch begin                        % n
        /OriginalFont load setfont
        /Encoding load exch get         % glyphName
        /compositeChars load dup
        2 index known                   % glyphName compositeChars known-p
        { 1 index get                   % glyphName [ 65 x y 129 ]
          dup 0 get ( ) dup             % glyphName [...] 65 ( ) ( )
          0 3 index put                 % glyphName [...] 65 (A)
          dup stringwidth setcharwidth
          0 0 moveto
          show pop                      % glyphName [...]
          dup 1 get 1 index 2 get       % glyphName [...] x y
          moveto                        % glyphName [...]
          3 get ( ) dup 3 2 roll        % glyphName ( ) ( ) 129
          0 exch put                    % glyphName (')
          show                          % glyphName
        }
        { pop
          /Decoding load                % glyphName Decoding
          dup 2 index known             % glyphName Decoding known-p
          { exch get }
          { pop pop 0 } ifelse          % n'
          ( ) dup 0 3 index put dup     % n' (A) (A)
          stringwidth setcharwidth
          0 0 moveto
          show                          % n'
        } ifelse
        pop
      end
    } bind def
  end                                   % newfont
  newfontname newfont definefont pop
} def                                   % doMakeComposite

/fillEuro {                             % w h --
  gsave exch 1000 div exch 1000 div scale
  955.852 232.172 moveto
  904.495 180.815 lineto
  829.454 117.848 734.626 83.333 636.667 83.333 curveto
  406.667 83.333 220 270 220 500 curveto
  220 730 406.667 916.667 636.667 916.667 curveto
  759.831 916.667 876.684 862.177 955.852 767.828 curveto
  988.474 855.291 lineto
  894.851 947.996 768.422 1000 636.667 1000 curveto
  360.667 1000 136.667 776 136.667 500 curveto
  136.667 224 360.667 0 636.667 0 curveto
  753.23 0 866.13 40.725 955.852 115.135 curveto
  closepath fill
  
  869.037 541.667 moveto
  901.025 625 lineto
  31.989 625 lineto
  0 541.667 lineto
  closepath fill
  
  805.059 375 moveto
  837.048 458.333 lineto
  31.989 458.333 lineto
  0 375 lineto
  closepath fill
  grestore
} bind def

/makeEuroCharstring {                   % w h -- charstring
  [ /pop cvx                            % w h mark pop
    3 index 0 0 0                       % w h mark pop w 0 0 0
    7 index 7 index /setcachedevice cvx 
                                % w h mark pop w 0 0 0 w h setcachedevice
    10 index 10 index /fillEuro load /exec cvx ] 
  cvx bind 3 1 roll pop pop
} def

/doEurifyFont {                         % oldname newname --
  exch
  findfont dup dup                      % newname dict dict dict
  /FontMatrix get matrix invertmatrix   % newname dict dict m
  {} forall pop pop [ 5 1 roll 0 0] makefont setfont   % newnamedict
  0 0 moveto
  (5) stringwidth pop                     % newname dict w
  (M) false charpath pathbbox 4 1 roll pop pop pop % newnamedict w h
  3 2 roll                                % newname w h dict
  
  dup length dict dup 3 1 roll begin      % newname w h newdict
    {1 index /FID ne {def} {pop pop} ifelse} forall
    CharStrings dup length 1 add dict dup 3 1 roll begin % newnamew h newdict newdict'
      {def} forall
      /Euro                               % newname w h newdict newdict' /Euro
      4 index 4 index makeEuroCharstring def
    end                                   % newname w h newdict newdict'
    /CharStrings exch def
  end
  3 1 roll pop pop                      % newname dict
  definefont pop
} bind def

end                                     % makeCompositeDict

% oldfontname newfontname baseEncoding targetEncoding compositeChars --
/makeComposite
{
  makeCompositeDict begin doMakeComposite end
} bind def

% oldfontname newfontname
/eurifyFont
{
  makeCompositeDict begin doEurifyFont end
} bind def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: font Times-Bold-Ogonki
/Times-Bold /Times-Bold-Ogonki OgonkiEncoding StandardEncoding 83 dict
dup /Ydieresis [89 194 219 168] put
dup /ydieresis [121 83 0 168] put
dup /Ucircumflex [85 221 219 28] put
dup /Ugrave [85 221 219 27] put
dup /ucircumflex [117 104 0 28] put
dup /ugrave [117 104 0 27] put
dup /Idieresis [73 28 219 168] put
dup /Igrave [73 28 219 27] put
dup /idieresis [136 -34 0 168] put
dup /igrave [136 -34 0 27] put
dup /Ecircumflex [69 174 219 28] put
dup /Egrave [69 174 219 27] put
dup /ecircumflex [101 61 0 28] put
dup /egrave [101 61 0 27] put
dup /Agrave [65 187 219 27] put
dup /agrave [97 76 0 27] put
dup /Ograve [79 222 219 27] put
dup /ograve [111 83 0 27] put
dup /Atilde [65 187 219 29] put
dup /atilde [97 76 0 29] put
dup /Ntilde [78 194 219 29] put
dup /ntilde [110 111 0 29] put
dup /Otilde [79 222 219 29] put
dup /otilde [111 83 0 29] put
dup /Aring [65 187 219 31] put
dup /aring [97 76 0 31] put
dup /abreve [97 83 0 162] put
dup /Abreve [65 194 240 162] put
dup /aogonek [97 175 -30 178] put
dup /Aogonek [65 384 -30 178] put
dup /cacute [99 70 0 180] put
dup /Cacute [67 210 219 180] put
dup /ccaron [99 84 0 183] put
dup /Ccaron [67 232 219 183] put
dup /dbar [100 240 300 173] put
dup /Dbar [208 0 0 160] put
dup /dcaron [100 473 53 39] put
dup /Dcaron [68 194 210 183] put
dup /ecaron [101 61 0 183] put
dup /Ecaron [69 174 219 183] put
dup /edotaccent [101 61 0 255] put
dup /Edotaccent [69 187 219 255] put
dup /eogonek [101 114 -30 178] put
dup /Eogonek [69 295 -30 178] put
dup /gbreve [103 83 0 162] put
dup /Gbreve [71 222 219 162] put
dup /Idotaccent [73 28 219 255] put
dup /iogonek [105 -50 -30 178] put
dup /Iogonek [73 63 -30 178] put
dup /lacute [108 -3 210 180] put
dup /Lacute [76 167 210 180] put
dup /lcaron [108 194 53 39] put
dup /Lcaron [76 309 53 39] put
dup /nacute [110 90 0 180] put
dup /Nacute [78 190 219 180] put
dup /ncaron [110 111 0 183] put
dup /Ncaron [78 194 210 183] put
dup /ohungarumlaut [111 83 0 189] put
dup /Ohungarumlaut [79 222 219 189] put
dup /racute [114 79 0 180] put
dup /Racute [82 239 210 180] put
dup /rcaron [114 55 0 183] put
dup /Rcaron [82 194 210 183] put
dup /sacute [115 20 0 180] put
dup /Sacute [83 100 219 180] put
dup /scedilla [115 12 0 184] put
dup /Scedilla [83 94 0 184] put
dup /tcaron [116 271 0 39] put
dup /Tcaron [84 167 210 183] put
dup /tcedilla [116 89 0 184] put
dup /Tcedilla [84 227 0 184] put
dup /umacron [117 104 0 30] put
dup /Umacron [85 215 219 30] put
dup /uhungarumlaut [117 104 0 189] put
dup /Uhungarumlaut [85 221 219 189] put
dup /uogonek [117 236 -25 178] put
dup /Uogonek [85 299 -25 178] put
dup /uring [117 111 0 31] put
dup /Uring [85 194 174 31] put
dup /zacute [122 80 0 180] put
dup /Zacute [90 160 219 180] put
dup /zdotaccent [122 70 0 255] put
dup /Zdotaccent [90 200 219 255] put
makeComposite
%%EndResource

%%EndResource
%%BeginResource: font Times-Roman-Ogonki
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding OgonkiEncoding
/OgonkiEncoding [
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /quotesingle
/quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl /endash /dagger
/daggerdbl /periodcentered /paragraph /bullet /quotesinglbase /quotedblbase /quotedblright /guillemotright
/ellipsis /perthousand /questiondown /grave /circumflex /tilde /macron /ring
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /emdash /AE /ordfeminine /Oslash /OE /ordmasculine /ae
/dotlessi /oslash /oe /threesuperior /thorn /twosuperior /threequarters /Eth
/trademark /registered /onequarter /Thorn /logicalnot /plusminus /minus /onesuperior
/copyright /mu /eth /brokenbar /onehalf /dotlessj /Euro /.notdef
/space /Aogonek /breve /Lslash /currency /Lcaron /Sacute /section
/dieresis /Scaron /Scedilla /Tcaron /Zacute /hyphen /Zcaron /Zdotaccent
/degree /aogonek /ogonek /lslash /acute /lcaron /sacute /caron
/cedilla /scaron /scedilla /tcaron /zacute /hungarumlaut /zcaron /zdotaccent
% 300
/Racute /Aacute /Acircumflex /Abreve /Adieresis /Lacute /Cacute /Ccedilla
/Ccaron /Eacute /Eogonek /Edieresis /Ecaron /Iacute /Icircumflex /Dcaron
/Eth /Nacute /Ncaron /Oacute /Ocircumflex /Ohungarumlaut /Odieresis /multiply
/Rcaron /Uring /Uacute /Uhungarumlaut /Udieresis /Yacute /Tcedilla /germandbls
/racute /aacute /acircumflex /abreve /adieresis /lacute /cacute /ccedilla
/ccaron /eacute /eogonek /edieresis /ecaron /iacute /icircumflex /dcaron
/dbar /nacute /ncaron /oacute /ocircumflex /ohungarumlaut /odieresis /divide
/rcaron /uring /uacute /uhungarumlaut /udieresis /yacute /tcedilla /dotaccent
] def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: encoding StandardEncoding
/StandardEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
% 100
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
% 200
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /exclamdown /cent /sterling /fraction /yen /florin /section
/currency /quotesingle /quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl
/.notdef /endash /dagger /daggerdbl /periodcentered /.notdef /paragraph /bullet
/quotesinglbase /quotedblbase /quotedblright /guillemotright /ellipsis /perthousand /.notdef /questiondown
% 300
/.notdef /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/emdash /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /AE /.notdef /ordfeminine /.notdef /.notdef /.notdef /.notdef
/Lslash /Oslash /OE /ordmasculine /.notdef /.notdef /.notdef /.notdef
/.notdef /ae /.notdef /.notdef /.notdef /dotlessi /.notdef /.notdef
/lslash /oslash /oe /germandbls /.notdef /.notdef /.notdef /.notdef
] def
%%EndResource
%!
% Add composite (i.e. accented) characters to any font
% By J. Chroboczek <jec@dcs.ed.ac.uk>
%
% -- code follows this line --
%%BeginResource: procset compose 0.8 0
% Copyright (c) 1996-1999 by J. Chroboczek
% This code may be distributed under the terms of the 
% GNU Public License, either version 2 of the license, or (at your
% option) any later version.
/makeCompositeDict 20 dict def
makeCompositeDict begin
/nameUnique {                           % name nameUnique namexxxxxx
  dup length exch 1 index string cvs    % length (name)
  1 index 12 add string dup             % length (name) (...) (...)
  3 2 roll 0 exch putinterval           % length (name...)
  dup 3 2 roll
  rand 12 string cvs
  putinterval
} bind def

/doMakeComposite
{
  /compositeChars exch def
  /targetEncoding exch def
  /baseEncoding exch def
  /newfontname exch def
  /oldfontname exch def
  /oldfont oldfontname findfont def
  /newfont 20 dict def
  /oldFontMatrix oldfont /FontMatrix get def
  /oldFontBBox oldfont /FontBBox get cvlit def
  /oldfontcopy oldfont length dict def

  newfont begin
    /FontType 3 def
    /PaintType 0 def      % not used
    /FontMatrix [0.001 0 0 0.001 0 0] def
    /FontBBox
    [
      oldFontBBox 0 get oldFontBBox 1 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
      oldFontBBox 2 get oldFontBBox 3 get
      oldFontMatrix transform
      [1000 0 0 1000 0 0] transform
    ] cvx def

    /StrokeWidth 0 def                  % not used

    /Encoding targetEncoding def

    /Decoding 256 dict def              % invert base encoding vector
    Decoding begin
      0 1 255
      { dup baseEncoding exch get exch def } bind for
    end

    newfont /compositeChars compositeChars put

    /FontName newfontname def

% make a copy of the original font, reencoding it
    oldfont
    oldfontcopy begin
      {1 index /FID ne
        {def}
        {pop pop} ifelse
      } bind forall
    end
    oldfontcopy /Encoding baseEncoding put
    oldfontname nameUnique oldfontcopy definefont
    1000 scalefont /OriginalFont exch def

    /BuildChar                          % newfont n BuildChar -
    {
      exch begin                        % n
        /OriginalFont load setfont
        /Encoding load exch get         % glyphName
        /compositeChars load dup
        2 index known                   % glyphName compositeChars known-p
        { 1 index get                   % glyphName [ 65 x y 129 ]
          dup 0 get ( ) dup             % glyphName [...] 65 ( ) ( )
          0 3 index put                 % glyphName [...] 65 (A)
          dup stringwidth setcharwidth
          0 0 moveto
          show pop                      % glyphName [...]
          dup 1 get 1 index 2 get       % glyphName [...] x y
          moveto                        % glyphName [...]
          3 get ( ) dup 3 2 roll        % glyphName ( ) ( ) 129
          0 exch put                    % glyphName (')
          show                          % glyphName
        }
        { pop
          /Decoding load                % glyphName Decoding
          dup 2 index known             % glyphName Decoding known-p
          { exch get }
          { pop pop 0 } ifelse          % n'
          ( ) dup 0 3 index put dup     % n' (A) (A)
          stringwidth setcharwidth
          0 0 moveto
          show                          % n'
        } ifelse
        pop
      end
    } bind def
  end                                   % newfont
  newfontname newfont definefont pop
} def                                   % doMakeComposite

/fillEuro {                             % w h --
  gsave exch 1000 div exch 1000 div scale
  955.852 232.172 moveto
  904.495 180.815 lineto
  829.454 117.848 734.626 83.333 636.667 83.333 curveto
  406.667 83.333 220 270 220 500 curveto
  220 730 406.667 916.667 636.667 916.667 curveto
  759.831 916.667 876.684 862.177 955.852 767.828 curveto
  988.474 855.291 lineto
  894.851 947.996 768.422 1000 636.667 1000 curveto
  360.667 1000 136.667 776 136.667 500 curveto
  136.667 224 360.667 0 636.667 0 curveto
  753.23 0 866.13 40.725 955.852 115.135 curveto
  closepath fill
  
  869.037 541.667 moveto
  901.025 625 lineto
  31.989 625 lineto
  0 541.667 lineto
  closepath fill
  
  805.059 375 moveto
  837.048 458.333 lineto
  31.989 458.333 lineto
  0 375 lineto
  closepath fill
  grestore
} bind def

/makeEuroCharstring {                   % w h -- charstring
  [ /pop cvx                            % w h mark pop
    3 index 0 0 0                       % w h mark pop w 0 0 0
    7 index 7 index /setcachedevice cvx 
                                % w h mark pop w 0 0 0 w h setcachedevice
    10 index 10 index /fillEuro load /exec cvx ] 
  cvx bind 3 1 roll pop pop
} def

/doEurifyFont {                         % oldname newname --
  exch
  findfont dup dup                      % newname dict dict dict
  /FontMatrix get matrix invertmatrix   % newname dict dict m
  {} forall pop pop [ 5 1 roll 0 0] makefont setfont   % newnamedict
  0 0 moveto
  (5) stringwidth pop                     % newname dict w
  (M) false charpath pathbbox 4 1 roll pop pop pop % newnamedict w h
  3 2 roll                                % newname w h dict
  
  dup length dict dup 3 1 roll begin      % newname w h newdict
    {1 index /FID ne {def} {pop pop} ifelse} forall
    CharStrings dup length 1 add dict dup 3 1 roll begin % newnamew h newdict newdict'
      {def} forall
      /Euro                               % newname w h newdict newdict' /Euro
      4 index 4 index makeEuroCharstring def
    end                                   % newname w h newdict newdict'
    /CharStrings exch def
  end
  3 1 roll pop pop                      % newname dict
  definefont pop
} bind def

end                                     % makeCompositeDict

% oldfontname newfontname baseEncoding targetEncoding compositeChars --
/makeComposite
{
  makeCompositeDict begin doMakeComposite end
} bind def

% oldfontname newfontname
/eurifyFont
{
  makeCompositeDict begin doEurifyFont end
} bind def
%%EndResource
%!
% Automatically generated by the Ogonkify package
% Do not modify
% -- code follows this line --
%%BeginResource: font Times-Roman-Ogonki
/Times-Roman /Times-Roman-Ogonki OgonkiEncoding StandardEncoding 83 dict
dup /Agrave [65 195 212 27] put
dup /Aring [65 185 187 31] put
dup /Atilde [65 195 212 29] put
dup /Ecircumflex [69 139 212 28] put
dup /Egrave [69 139 212 27] put
dup /Idieresis [73 0 212 168] put
dup /Igrave [73 0 212 27] put
dup /Ntilde [78 195 212 29] put
dup /Ograve [79 195 212 27] put
dup /Otilde [79 195 212 29] put
dup /Ucircumflex [85 195 212 28] put
dup /Ugrave [85 195 212 27] put
dup /Ydieresis [89 195 212 168] put
dup /agrave [97 56 0 27] put
dup /aring [97 56 0 31] put
dup /atilde [97 56 0 29] put
dup /ecircumflex [101 56 0 28] put
dup /egrave [101 56 0 27] put
dup /idieresis [136 -27 0 168] put
dup /igrave [136 -27 0 27] put
dup /ntilde [110 84 0 29] put
dup /ograve [111 84 0 27] put
dup /otilde [111 84 0 29] put
dup /ucircumflex [117 84 0 28] put
dup /ugrave [117 84 0 27] put
dup /ydieresis [121 84 0 168] put
dup /abreve [97 55 0 162] put
dup /Abreve [65 194 223 162] put
dup /aogonek [97 209 0 178] put
dup /Aogonek [65 465 0 178] put
dup /cacute [99 70 0 180] put
dup /Cacute [67 212 212 180] put
dup /ccaron [99 69 0 183] put
dup /Ccaron [67 196 212 183] put
dup /dbar [100 200 300 173] put
dup /Dbar [208 0 0 160] put
dup /dcaron [100 426 75 39] put
dup /Dcaron [68 194 216 183] put
dup /ecaron [101 55 0 183] put
dup /Ecaron [69 139 214 183] put
dup /edotaccent [101 61 0 255] put
dup /Edotaccent [69 154 212 255] put
dup /eogonek [101 142 9 178] put
dup /Eogonek [69 320 0 178] put
dup /gbreve [103 84 0 162] put
dup /Gbreve [71 195 212 162] put
dup /Idotaccent [73 0 212 255] put
dup /iogonek [105 12 0 178] put
dup /Iogonek [73 67 0 178] put
dup /lacute [108 -5 216 180] put
dup /Lacute [76 139 216 180] put
dup /lcaron [108 192 75 39] put
dup /Lcaron [76 250 52 39] put
dup /nacute [110 90 0 180] put
dup /Nacute [78 190 212 180] put
dup /ncaron [110 83 0 183] put
dup /Ncaron [78 194 214 183] put
dup /ohungarumlaut [111 83 0 189] put
dup /Ohungarumlaut [79 194 214 189] put
dup /racute [114 22 0 180] put
dup /Racute [82 210 216 180] put
dup /rcaron [114 0 0 183] put
dup /Rcaron [82 167 216 183] put
dup /sacute [115 20 0 180] put
dup /Sacute [83 100 212 180] put
dup /scedilla [115 28 0 184] put
dup /Scedilla [83 112 0 184] put
dup /tcedilla [116 53 0 184] put
dup /Tcedilla [84 197 0 184] put
dup /tcaron [116 214 0 39] put
dup /Tcaron [84 139 216 183] put
dup /uhungarumlaut [117 83 0 189] put
dup /Uhungarumlaut [85 194 214 189] put
dup /umacron [117 81 0 30] put
dup /Umacron [85 205 212 30] put
dup /uogonek [117 236 5 178] put
dup /Uogonek [85 287 5 178] put
dup /uring [117 83 0 31] put
dup /Uring [85 194 179 31] put
dup /zacute [122 60 0 180] put
dup /Zacute [90 120 212 180] put
dup /zdotaccent [122 50 0 255] put
dup /Zdotaccent [90 140 212 255] put
makeComposite
%%EndResource

%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-15 support
/iso15dict 8 dict begin
  /fCourier ISO-8859-15Encoding /Courier-Ogonki reencode_font
  /fCourier-Bold ISO-8859-15Encoding /Courier-Bold-Ogonki reencode_font
  /fCourier-BoldOblique ISO-8859-15Encoding /Courier-BoldOblique-Ogonki reencode_font
  /fCourier-Oblique ISO-8859-15Encoding /Courier-Oblique-Ogonki reencode_font
  /fHelvetica ISO-8859-15Encoding /Helvetica-Ogonki reencode_font
  /fHelvetica-Bold ISO-8859-15Encoding /Helvetica-Bold-Ogonki reencode_font
  /fTimes-Bold ISO-8859-15Encoding /Times-Bold-Ogonki reencode_font
  /fTimes-Roman ISO-8859-15Encoding /Times-Roman-Ogonki reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       ) p
(program) K
( ) p
(mstamp) L n
() p 8 T () S
(use) K
( ) p
(wfns) l n
() p 8 T () S
(use) K
( ) p
(trdens) l n
(        ) p
(use) K
( ) p
(scattering) l n
(        ) p
(use) K
( ) p
(bt) l n
(        ) p
(use) K
( ) p
(constants) l n
(        ) p n
(      ) S 8 T () S
(implicit) K
( ) p
(real) K
(*8\(a-h,o-z\)) p n
(       ) N
() N
(        ) S
(logical) K
(:: dry) p n
(        ) S
(integer) K
( ::jnn,icb,party,ttype) p n
(        ) S
(real) K
(*8:: massp,masst,mtclus,spin) p n
(        ) N
() N
(        ) S
(interface) K n
(          ) p
(function) K
( ) p
(wxxi) L
(\(qrr,qcore,tnct,noangs,noangs2\)) p n
(            ) S
(integer) K
(::noangs,noangs2) p n
(            ) S
(real) K
(*8::qrr,qcore\(:\)) p n
(            ) S
(complex) K
(*16::tnct\(:\)) p n
(            ) S
(complex) K
(*16::wxxi) p n
(          ) S
(end) K
( ) p
(function) K
( ) p
(wxxi) L n
(        ) p
(end) K
( ) p
(interface) K n
() p n
() N
(        ) S
(namelist) K
( /mst/ qmax, tlab,thmin,thmax,dth,dry) p n
(        ) S
(namelist) K
( /proj/ massp,zp,jp) p n
(        ) S
(namelist) K
( /targ/ masst,zt,ncl,inelcb,nustates,quais,irho) p n
(        ) S
(namelist) K
( /jpi/ jnn,party,icb) p n
(        ) S
(namelist) K
( /kapas/ k0000,k1100,k0111,k1120,k1121,k1122) p n
(        ) S
(namelist) K
( /tclus/ mtclus,spin,ztclus,ttype) p n
(        ) S
(namelist) K
( /quad1/ qmaxr,quin,mquadi,mquado) p n
(        ) S
(namelist) K
( /quad2/ qmaxrd,quind,mquadid,mquadod ) p n
(        ) S
(namelist) K
( /quad3/ rmaxr,rin,mrquadi,mrquado) p n
( ) N
() N
(        ) S
(write) K
(\(*,*\)') p
(MSTamp) str
(') p n
(      ) S 8 T (pi = 4d0*) S
(atan) K
(\(1d0\)) p n
(        amu=931.49432) N
(        fpi = 4d0*pi) N
(      ) S 8 T () S
(call) K
( ) p
(logfac) l
(\(lfact\)) p n
(       ) N
() N
(        ) S
(open) K
(\() p
(unit) k
(=18,file=') p
(mst.in) str
(',status=') p
(old) str
('\)) p n
(        ) S
(open) K
(\() p
(unit) k
(=99,file=') p
(mst.log) str
(',status=') p
(unknown) str
('\)) p n
(!        open\(unit=10,file='output.data',status='unknown'\)) c n
(!        open\(unit=15,file='gammin.data',status='old'\) ) N
() p n
(!        open\(20,file='trcmall.den',status='unknown'\)) c n
(!        open\(21,file='trvalall.den',status='unknown'\)) N
(!        open\(23,file='trval.den', status='unknown'\)) N
(!        open\(24,file='trcm.den', status='unknown'\)) N
(!        open\(25,file='shakeoff.den', status='unknown'\)) N
() p n
(!        open\(unit=35,file='tnn.data', status='unknown'\)) c n
(!        open\(unit=36,file='tnnon.data', status='unknown'\)) N
(!        open\(unit=40,file='dens.data', status='unknown'\)) N
() p n
(!        open\(unit=52,file='M0000',status='unknown'\)) c n
(!        open\(unit=53,file='M0111',status='unknown'\)) N
(!!       open\(unit=54,file='M1011',status='unknown'\)) N
(!        open\(unit=55,file='M1100',status='unknown'\)) N
(!!       open\(unit=56,file='M1111',status='unknown'\)) N
(!        open\(unit=57,file='M1120',status='unknown'\)) N
(!        open\(unit=58,file='M1121',status='unknown'\)) N
(!        open\(unit=59,file='M1122',status='unknown'\)) N
() p n
(!        open\(unit=65,file='doublexs.data',status='unknown'\)) c n
(!        open\(unit=70,file='xsection11.data',status='unknown'\)) N
(mstmain.f90) (Page 1/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!        open\(unit=73,file='xs11soff.data',status='unknown'\)) c n
(!        open\(unit=75,file='xsection9.data',status='unknown'\)) N
(!        open\(unit=71,file='xsecthex.data',status='unknown'\)) N
(!        open\(unit=96,file='xsecex.data', status='unknown'\)) N
() p n
(!        open\(unit=77, file='tncBA.data', status='unknown'\)) c n
(!        open\(unit=80, file='tna.data', status='old'\)) N
(!        open\(unit=85, file='tnaint.data', status='unknown'\)) N
() p n
(!        open\(unit=92, file='scratch.data', status='unknown'\)) c n
(!        open\(unit=95, file='warning.txt', status='unknown'\)) N
(        ) p n
() N
() N
(c=======================================================================) c n
(c       reads input parameters) N
(c=======================================================================) N
(        itnn=0;itnnav=0 ) p
(!PROVISIONAL) c n
(        quais=1) p n
(        dry=.false.) N
(        ) S
(read) K
(\(18,nml=mst\)) p n
(        ) S
(read) K
(\(18,nml=quad1\)) p n
(        ) S
(read) K
(\(18,nml=quad2\)) p n
(        ) S
(read) K
(\(18,nml=quad3\)) p n
(        ) S
(read) K
(\(18,nml=proj\)) p n
(        m1=massp) N
(        z1=zp) N
(        ) S
(read) K
(\(18,nml=targ\)) p n
(        ) S
(if) K
( \(ncl>3\) ) p
(then) K n
(           ) p
(write) K
(\(*,*\) ') p
(Only up to three clusters allowed) str
(';) p
(stop) K n
(        ) p
(endif) K n
(        ) p
(if) K
(\(nustates>50\) ) p
(then) K n
(            ) p
(write) K
(\(*,*\) ') p
(Too many states. Increase dimension of quais) str
(') p n
(            ) S
(stop) K n
(         ) p
(endif) K n
(       ) p n
(!        allocate\(jnnpin\(nustates\)\)) c n
(!        allocate\(partyin\(nustates\)\)) N
(!        allocate\(istatcb\(nustates\)\)) N
(!        do i=1,nustates) N
(!           read\(18,nml=jpi\)) N
(!           jnnpin\(i\)=jnn) N
(!           partyin\(i\)=party) N
(!           istatcb\(i\)=icb) N
(!           write\(*,nml=jpi\)) N
(!        enddo) N
(        ) p
(read) K
(\(18,nml=kapas\)) p n
( ) N
(       ) N
() N
(c *** memory allocation here!!) c n
(        ) p
(write) K
(\(*,') p
(\("Reading",1i2," clusters"\)) str
('\) ncl) p n
(        ) S
(read) K
(\(18,nml=tclus\) ) p
(! valence 1 ) c n
(!        write\(*,nml=tclus\) ) N
(        m2=mtclus) p n
(        z2=ztclus) N
(        ) S
(read) K
(\(18,nml=tclus\) ) p
(! valence 2) c n
(!         write\(*,nml=tclus\)) N
(        m3=mtclus) p n
(        z3=ztclus) N
(        ttype=0 ) S
(!cluster T-matrix calculated on-the-fly) c n
(        ) p
(read) K
(\(18,nml=tclus\) ) p
(! core) c n
(!         write\(*,nml=tclus\)) N
(        m4=mtclus) p n
(        z4=ztclus) N
(        ) S
(close) K
(\(18\)) p n
(        ) N
( ) N
(!!$        do icl=1,ncl) c n
(mstmain.f90) (Page 2/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (1/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!!$           read\(15,nml=tclus\)  ! read t-cluster ) c n
(!!$           if \(\(ztclus.eq.0\).or.\(ztclus.eq.1\)\) then) N
(!!$              ) N
(!!$        call tntensor\(\)) N
(!!$           else) N
(!!$              call tncore\(\)) N
(!!$           endif) N
(!!$        enddo) N
(        ) p n
( ) N
() N
() N
() N
(c OLD INPUT-----------------------------------------) c n
(!        read\(15,*\)qmax) N
(!        read\(15,*\)tlab) N
(!        read\(15,*\)m1,m2,m3,m4) N
(!        read\(15,*\)s2,s3) N
(!        read\(15,*\)thmin, thmax,dth) N
(!        read\(15,*\)qmaxr,quin,mquadi,mquado) N
(!        read\(15,*\)qmaxrd,quind,mquadid,mquadod ) N
(c        read\(15,*\)irho) N
(c        read\(15,*\)itnn,itnnav) N
(c        read\(15,*\)rhomx,steprho) N
(c        read\(15,*\)inelcb) N
(!        read\(15,*\)rmaxr,rin,mrquadi,mrquado) N
(c        read\(15,*\) nustates,itstates ) N
(c        read\(15,*\)\(\(jnnpin\(i\),partyin\(i\),istatcb\(i\)\),i=1,nustates\)) N
(c        read\(15,*\)k0000,k1100,k0111,k1120,k1121,k1122 ) N
(c------------------------------------) p n
(        zz = ) S
(cmplx) K
(\(0.d0,1.d0\)) p n
(        mn = 939.5731) N
(        hbarc = 197.3289) N
(        s1 = 0.5) N
(        iqmx = mquadi + mquado) N
(        iqmxd = mquadid + mquadod) N
(        mq = iqmx) N
(        mdelta = iqmxd) N
(        dq=0.1) N
(        ) N
(        qmxnn = qmaxr) N
(        nq=qmxnn/dq) N
(        nangles = \(thmax-thmin\)/dth + 1) N
(        ) S
(write) K
(\(*,*\)') p
(iqmx,iqmxd,qmxnn=) str
(',iqmx,iqmxd,qmxnn) p n
(        ) S
(call) K
( ) p
(gauss3) l
(\(qmaxr,quin,mquadi,mquado,radxis,radwt\)) p n
(        ) S
(call) K
( ) p
(gauss3) l
(\(qmaxrd,quind,mquadid,mquadod,radxisd,radwtd\)) p n
(        ) S
(call) K
( ) p
(gauss3) l
(\(rmaxr,rin,mrquadi,mrquado,radxisr,radwtr\)) p n
(c        if \(iqmx.gt.mrho.and.iqmxd.gt.mrho\)then) c n
(c        write\(10,*\)'iqmx gt mrho') N
(c        stop) N
(c        endif) N
() p n
(        m234 = m2+m3+m4) N
(        m1234 = m234+m1) N
(        m23=m2+m3) N
(        m34=m3+m4) N
(        m14=m1+m4) N
(        m12=m1+m2) N
(        ncore = m4) N
(        amass = m234) N
(        muna = amass/\(amass+massp\)*mn) N
(        k0 = 2 * muna * tlab) N
(        k0 = ) S
(sqrt) K
(\(k0\)/hbarc) p n
(        ) S
(write) K
(\(99,*\)') p
(- In MST: k0=) str
(',k0) p n
(!        mucore = mn*m4/\(m4+1.\) !Changed 19/03/2003) c n
(        mucore = amu*massp*m4/\(m4+massp\)) p n
(       ) N
() N
(c energy parameters) c n
(mstmain.f90) (Page 3/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        w12=tlab*\(1-m1*m34/m12/m234\)) p n
(        e14=tlab*\(1-m1*m23/m14/m1234\) ) S
(!lab) c n
(        w14=e14*m1*m4/m14 ) p
(!cm) c n
() p n
(        kcore = 2 * mucore * e14) N
(        kcore = ) S
(sqrt) K
(\(kcore\)/hbarc) p n
(        ) S
(write) K
(\(99,*\)') p
(+Allocating) str
(',mdelta,') p
(pts for tvalence,tcore) str
(') p n
(        ) S
(allocate) K
(\(tvalence\(mdelta\)\)) p n
(        ) S
(allocate) K
(\(tcore\(mdelta\)\)) p n
() N
(        ) N
(        tvalence\(1:mdelta\)=\(0.d0,0.d0\)) N
(        tcore\(1:mdelta\) = \(0.d0,0.d0\)) N
(      ) S 8 T (stepdel = qmax/ndel) N
() N
(c====================================================================) c n
(c check) N
(c        call statescb\(1,0,1\)) N
(c        call statescb\(0,0,1\)) N
(c        call statescb\(1,1,1\)) N
(c        stop) N
(c======================================================================) N
(c       reads and calculates the density functions in appropriate grid) N
(c======================================================================) N
(        ) p
(write) K
(\(99,*\) ') p
(-> Entering readwf) str
(') p n
(        ) S
(if) K
( \(dry\) ) p
(then) K n
(           ) p
(write) K
(\(*,*\) ') p
(**WARNING**: DRY RUN. NO WF READ) str
(') p n
(        ) S
(else) K n
(           ) p
(call) K
( ) p
(readwf) l n
(        ) p
(endif) K n
(c===================================================================) c n
(c       calculates the scattering) N
(c==================================================================     ) N
() p n
(c **  reads and interpolates NA \( proton/neutron - core\) scattering matrix) c n
(       ) p
(write) K
(\(99,*\) ') p
(-> Entering tncore) str
(') p n
(      ) S
(call) K
( ) p
(tncore) l
(\(e14,ttype\)) p n
() N
(c ** calculates scattering by valence particles) c n
(       ) p
(write) K
(\(99,*\) ') p
(-> Entering tntensor w12=) str
(',w12) p n
(      ) S
(call) K
( ) p
(tntensor) l
(\(w12,ttype\)) p n
(     ) N
(       ) S
(write) K
(\(99,*\) ') p
(<- Exiting  tntensor) str
(') p n
(c **  calculates cross section) c n
(       ) p
(write) K
(\(99,*\) ') p
(-> Entering drotat) str
(') p n
(       ) S
(call) K
( ) p
(drotat) l
(\(\)) p n
(       ) S
(write) K
(\(99,*\) ') p
(-> Entering xsecinel) str
(') p n
(       ) S
(call) K
( ) p
(xsecinel) l
(\(\)) p n
(       ) S
(write) K
(\(99,*\) ') p
(-> Entering test) str
(') p n
(       ) S
(if) K
( \(dry\) ) p
(stop) K n
(       ) p
(call) K
( ) p
(test) l
(\(\)) p n
(       ) N
(      ) N
(       ) S
(write) K
(\(99,*\) ') p
(-> Entering sigex) str
(') p n
(       ) S
(call) K
( ) p
(sigex) l
(\(\)) p n
(       ) S
(write) K
(\(99,*\) ') p
(<- Exiting sigex) str
(') p n
(       ) S
(call) K
( ) p
(flush) l
(\(99\)) p n
(       ) N
(       ) S
(end) K
( ) p
(program) K
( ) p
(mstamp) L n
() p n
(c-------------------------------------------------------------) N
() S 8 T () S
(subroutine) K
( ) p
(cmdens) L
(\() p
(in) k
(\)) p n
(c-------------------------------------------------------------) N
() S 8 T () S
(use) K
( ) p
(parameters) l n
(        ) p
(use) K
( ) p
(wfns) l n
() p 8 T () S
(use) K
( ) p
(trdens) l n
(        ) p
(use) K
( ) p
(scattering) l n
(      ) p 8 T () S
(implicit) K
( ) p
(real) K
(*8\(a-h,o-z\)) p n
() S 8 T () S
(real) K
(*8 bes\(nrxy\),xn\(ndel\)) p n
(mstmain.f90) (Page 4/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (2/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(complex) K
(*16 taux\(mrxy,mrxy\), cint2d) p n
() S 8 T (hat\(i\) = ) S
(sqrt) K
(\() p
(real) K
(\(2*I+1\)\)) p n
() N
(        lvalmax\() S
(in) k
(\)=-1) p n
() S 8 T () S
(do) K
( 100 ll=0,mll) p n
() S 8 T (rhocm\(:,ll,in\) = 0.0) N
() N
(        nrmax = mrquadi+mrquado) N
() S 8 T () N
() S 8 T () S
(do) K
( 60 ia=1,na\(elastic\)) p n
() S 8 T (lx = TNQ\(1,ia,elastic\) ) N
() S 8 T (ly = TNQ\(2,ia,elastic\)) N
() S 8 T (lll = TNQ\(3,ia,elastic\)) N
() S 8 T (S = TNQ\(4,ia,elastic\)) N
() S 8 T (jnn = TNQ\(5,ia,elastic\)) N
(!) c 8 T (ic = TNQ\(6,ia,elastic\)) N
(!) S 8 T (jc2 = TNQ\(7,ia,elastic\)) N
(!) S 8 T (jtot2 = TNQ\(8,ia,elastic\)) N
() p n
() S 8 T () S
(do) K
( 60 ib=1,na\(in+1\)) p n
() S 8 T (lxp = TNQ\(1,ib,itytr\) ) N
(!       RC modification here) c n
(               ) p
(if) K
( \(lxp) p
(.ne.) K
(lx\) ) p
(go to) K
( 60) p n
() S 8 T (lyp = TNQ\(2,ib,itytr\)) N
() S 8 T (lllp = TNQ\(3,ib,itytr\)) N
() S 8 T (Sp = TNQ\(4,ib,itytr\)) N
(!       RC modification here) c n
(               ) p
(if) K
( \(Sp) p
(.ne.) K
(S\) ) p
(go to) K
( 60) p n
() S 8 T (jnnp = TNQ\(5,ib,itytr\)) N
(!) c 8 T (icp = TNQ\(6,ib,itytr\)) N
(!) S 8 T (jc2p = TNQ\(7,ib,itytr\)) N
(!) S 8 T (jtot2p = TNQ\(8,ib,itytr\)) N
(! ) S 8 T ( if\(ic/=icp\) go to 60) N
( ) p 8 T ( ) S
(if) K
(\(s/=sp\) ) p
(go to) K
( 60) p n
( ) S 8 T ( ) S
(if) K
(\(lx/=lxp\) ) p
(go to) K
( 60) p n
() S 8 T () N
() S 8 T (alg1 = hat\(jnnp\) * hat\(ll\) * hat\(ly\)*hat\(lll\)*hat\(lllp\)) N
() S 8 T (alg2 = \(-1\)**\(lll+jnn+2*jnnp+s + 2*lx+ly+lyp\) ) N
() S 8 T (alg3 = racah2\(lll+z,jnn+z,lllp+z,jnnp+z,s+z,ll+z\)) N
(        ) S
(if) K
( \() p
(abs) K
(\(ll\)>1\) ) p
(write) K
(\(6,*\)') p
(alg3) str
(',alg3,') p
(ll) str
(',) p
(abs) K
(\(ll\)) p n
() S 8 T (alg4 = racah2\(ll+z,ly+z,lllp+z,lx+z,lyp+z,lll+z\)) N
() S 8 T (alg5 = cleb6\(ll+z,z,ly+z,z,lyp+z,z\)) N
() S 8 T () S 16 T () S
(if) K
(\() p
(abs) K
(\(alg5\)<1e-10\) ) p
(goto) K
( 60) p n
() S 8 T (alg = alg1*alg2*alg3*alg4*alg5 ) N
() N
(!!$        if \(abs\(nustates-itstates\).gt.0.0001\)then) c n
(!!$        call statescb\(Jnnp,lxp,lyp\)) N
(!!$        if\(jnncb.eq.0\)alg=0.) N
(!!$        endif) N
() p n
() S 8 T () S
(write) K
(\(6,10\) in,ll,ia,ib,alg1,alg2,alg3,alg4,alg5,alg) p n
(10) S 8 T () S
(format) K
(\(') p
( in,ll=) str
(',2i2,') p
( #) str
(',2i3,') p
(:) str
(',5f8.4,f10.5\)) p n
() N
() S 8 T () S
(if) K
(\() p
(abs) K
(\(alg\)<1e-10\) ) p
(goto) K
( 60) p n
() S 8 T () S
(do) K
( 50 idel=1,ndel) p n
( ) S 8 T ( delta = \(idel-1\)*stepdel) N
(         deltaren = delta*m23/m234) N
() S 8 T ( ) S
(if) K
(\(ll>0) p
(.and.) K
(idel==1\) ) p
(go to) K
( 50) p n
() S 8 T ( ) S
(call) K
( ) p
(bessr) l
(\(ll,deltaren,bes,nrxy,rstep\)  ) p
(! Bessel or spherical bessel?`) c n
() p 8 T (XN\(idel\) = 0.0) N
(        sumcm = 0.0) N
(        ) S
(DO) K
( 20 IX=1,NRXY) p n
(        ) S
(DO) K
( 20 IY=1,NRXY) p n
(!) c 8 T (RR = RV\(IY\)) N
() p n
() S 8 T (T = WF\(IX,IY,IA,elastic\)*WF\(IX,IY,IB,ITYTR\) ) N
() S 8 T (trr = T * bes\(IY\) * rstep**2 ) N
(        taux\(ix,iy\) = trr) N
(!       RC modification here) c n
(mstmain.f90) (Page 5/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!) c 8 T (XN\(idel\) = XN\(idel\) + trr) N
(20) p 8 T (sumcm  = sumcm + trr) N
() N
(!       Calculates radial integral more accurately) c n
(!       sumcm =  0.0) N
(!       do 25 i=1,nrmax) N
(!       do 25 j=1,nrmax) N
(!       qr = radxisr\(i\)) N
(!       qrr = radxisr\(j\)) N
(!       tauxin = dreal\(cint2d\(RV,RV,taux,qr,qrr,NRXY,NRXY,5,mrxy\)\)) N
(!       sumcm = sumcm + tauxin * radwtr\(i\)*radwtr\(j\)) N
(!       if \(icount.lt.1\) write\(*,*\)tauxin, radwtr\(i\),radwtr\(j\)) N
(! 25    continue) N
() p n
() N
(        sumcm = sumcm * alg       ) N
(        rhocm\(idel,ll,in\) = rhocm\(idel,ll,in\) + sumcm) N
(50) S 8 T () S
(continue) K n
(60) p 8 T () S
(continue) K n
() p n
(!       RC modification here) c 32 T () N
(!) S 8 T (rhocm\(:,ll,in\) = XN\(:\) * alg) N
(   ) p 8 T (lvalmax\() S
(in) k
(\)=ll        ) p n
(100) S 8 T () S
(continue) K n
(   ) p 8 T () S
(if) K
(\(lvalmax\() p
(in) k
(\)>=0\) ) p
(then) K n
(        parityf = \(-1\)**\(lxp+lyp\)) p n
() S 8 T () S
(write) K
(\(20,101\) in, jnnp, parityf) p n
(101) S 8 T () S
(format) K
(\(') p
(# CM transition density to state no.) str
(',i3, i3, i3 \)) p n
() S 8 T () S
(do) K
( 105 idel=1,ndel) p n
( ) S 8 T ( delta = \(idel-1\)*stepdel) N
(105) S 8 T () S
(write) K
(\(20,106\) delta,\(rhocm\(idel,ll,in\),ll=0,lvalmax\() p
(in) k
(\) \)) p n
(106) S 8 T () S
(format) K
(\(f8.3,3f12.8\)) p n
() S 8 T () S
(write) K
(\(20,*\) ') p
(&) str
(' ) p n
() S 8 T () S
(call) K
( ) p
(flush) l
(\(20\)) p n
() N
(         ) S
(if) K
( \(in) p
(.eq.) K
(3\)) p
(then) K n
(         ) p
(do) K
( 110 idel=1,ndel) p n
(         delta = \(idel-1\)*stepdel  ) N
(         ) S
(write) K
( \(9,*\) ') p
(inel) str
(',delta,rhocm\(idel,0,in\), rhocm\(idel,1,in\)) p n
( 110     ) S
(continue) K n
(         ) p
(endif) K
( ) p n
() N
() S 8 T () S
(endif) K n
() p n
() S 8 T () S
(return) K n
() p 8 T () S
(end) K n
() p n
() S 8 T () S
(subroutine) K
( ) p
(valdens) L
(\() p
(in) k
(\)) p n
(c***************************************************************************) c n
() p 8 T () S
(use) K
( ) p
(wfns) l n
() p 8 T () S
(use) K
( ) p
(trdens) l n
(        ) p
(use) K
( ) p
(scattering) l n
(      ) p 8 T () S
(implicit) K
( ) p
(real) K
(*8\(a-h,o-z\)) p n
() S 8 T () S
(real) K
(*8 bes1\(nrxy\),bes2\(nrxy\),xn\(ndel,ndel\)) p n
() S 8 T () S
(integer) K
( b,c,d,phi1,phi2) p n
() S 8 T () S
(complex) K
(*16 alg1) p n
(        ) S
(complex) K
(*16 alg,sumval) p n
() S 8 T (hat\(i\) = ) S
(sqrt) K
(\() p
(real) K
(\(2*I+1\)\)) p n
() S 8 T (hats\(i\) = ) S
(real) K
(\(2*I+1\)) p n
() N
() S 8 T (s2 = 0.5  ) N
() S 8 T (s3 = 0.5   ) N
() S 8 T (bmax\() S
(in) k
(\)=-1) p n
() S 8 T () S
(do) K
( 100 b=0,mll) p n
(  ) S 8 T (cdmax\(1:2,b,in\)=-1) N
() S 8 T () S
(do) K
( 100 c=0,mll) p n
() S 8 T () S
(do) K
( 100 d=0,mll) p n
() S 8 T (rhoval\(:,b,c,d,in\) = 0.0) N
() S 8 T () N
(mstmain.f90) (Page 6/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (3/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(do) K
( 60 ia=1,na\(elastic\)) p n
() S 8 T (lx = TNQ\(1,ia,elastic\) ) N
() S 8 T (ly = TNQ\(2,ia,elastic\)) N
() S 8 T (lll = TNQ\(3,ia,elastic\)) N
() S 8 T (S = TNQ\(4,ia,elastic\)) N
() S 8 T (jnn = TNQ\(5,ia,elastic\)) N
(!) c 8 T (ic = TNQ\(6,ia,elastic\)) N
(!) S 8 T (jc2 = TNQ\(7,ia,elastic\)) N
(!) S 8 T (jtot2 = TNQ\(8,ia,elastic\)) N
() p n
() S 8 T () S
(do) K
( 60 ib=1,na\(in+1\)) p n
() S 8 T (lxp = TNQ\(1,ib,itytr\) ) N
() S 8 T (lyp = TNQ\(2,ib,itytr\)) N
() S 8 T (lllp = TNQ\(3,ib,itytr\)) N
() S 8 T (Sp = TNQ\(4,ib,itytr\)) N
() S 8 T (jnnp = TNQ\(5,ib,itytr\)) N
(!) c 8 T (icp = TNQ\(6,ib,itytr\)) N
(!) S 8 T (jc2p = TNQ\(7,ib,itytr\)) N
(!) S 8 T (jtot2p = TNQ\(8,ib,itytr\)) N
(! ) S 8 T ( if\(ic/=icp\) go to 60) N
(!) S 8 T (do 60 l=0,mllt) N
(!) S 8 T (do 60 lp=0,mllt) N
(        ) p
(do) K
( 60 l=0,mllmx) p n
(           ) S
(do) K
( 60 lp=0,mllmx) p n
() S 8 T () N
( ) S 8 T (alg1 =  \(0.,1.\)**\(-l-lp\)) N
() S 8 T (alg2 = hats\(l\) * hats\(lp\) * hats\(d\)) N
(     X          * hat\(b\)*hat\(s\)*hat\(sp\)) N
(     X) S 8 T () S 16 T (* hat\(lll\)*hat\(lllp\)*hat\(lx\)) N
(     x          * hat\(ly\) * hat\(jnnp\) / hat\(c\)) N
() S 8 T ( phi1 = 2*s - sp + ) S
(nint) K
(\(s2 - s3\) + b) p n
() S 8 T ( phi2 = lll+lllp-jnnp+c-l+lp+d+jnn+2*\(d-b+Sp-lyp-lx\)) N
() S 8 T (alg3 = \(-1\)**\(phi1 + phi2\)) N
() S 8 T (alg4 = cleb6\(l+z,z,lx+z,z,lxp+z,z\) ) N
() S 8 T (alg5 = cleb6\(l+z,z,lp+z,z,c+z,z\) ) N
() S 8 T (alg6 = cleb6\(lp+z,z,ly+z,z,lyp+z,z\)) N
() S 8 T () S 16 T () S
(if) K
(\() p
(abs) K
(\(alg4*alg5*alg6\)<1e-10\) ) p
(goto) K
( 60) p n
() N
() S 8 T (alg7 = racah2\(s+z,s2,sp+z,s2,s3,b+z\)) N
() S 8 T (alg8 = wig9j\(b+z,  d+z,   c+z,) N
(     X               sp+z, jnnp+z,lllp+z,) N
(     X               s+z,  jnn+z, lll+z\)) N
() S 8 T (alg9 = wig9j\(l+z,  lp+z,  c+z,) N
(     X               lx+z, ly+z,  lll+z,) N
(     X               lxp+z,lyp+z, lllp+z\)) N
() S 8 T (alg =alg1*alg2*alg3*alg4*alg5*alg6*alg7*alg8*alg9 ) N
() N
(!        if \(abs\(nustates-itstates\).gt.0.0001\)then) c n
(!        call statescb\(Jnnp,lxp,lyp\)) N
(!        if\(jnncb.eq.0\)alg=0.) N
(!        endif) N
() p n
() S 8 T () S
(if) K
(\() p
(abs) K
(\(alg\)<1e-10\) ) p
(goto) K
( 60) p n
() S 8 T (XN\(:,:\) = 0.0) N
() S 8 T () S
(do) K
( 50 idel1=1,ndel) p n
( ) S 8 T ( delta1 = \(idel1-1\)*stepdel) N
(         delta1ren = delta1*m3/m23) N
() S 8 T ( ) S
(if) K
(\(l>0) p
(.and.) K
(idel1==1\) ) p
(go to) K
( 50) p n
() S 8 T ( ) S
(call) K
( ) p
(bessr) l
(\(l,delta1ren,bes1,nrxy,rstep\) ) p n
( ) S 8 T ( ) S
(if) K
(\(lp>0) p
(.and.) K
(idel1==1\) ) p
(go to) K
( 48) p n
( ) S 8 T ( delta2 = \(idel1-1\)*stepdel) N
(         delta2ren = delta1*m4/m234) N
() S 8 T ( ) S
(call) K
( ) p
(bessr) l
(\(lp,delta2ren,bes2,nrxy,rstep\)  ) p n
(!       XN\(idel1,idel2\) = 0.0) c n
(        sumval = \(0.0,0.0\)) p n
(        ) S
(DO) K
( 20 IX=1,NRXY) p n
(        ) S
(DO) K
( 20 IY=1,NRXY) p n
(!) c 8 T ( RR = RV\(IY\)) N
() p 8 T (T = WF\(IX,IY,IA,elastic\)*WF\(IX,IY,IB,ITYTR\) ) N
(mstmain.f90) (Page 7/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (trr = T * bes1\(IX\)*bes2\(IY\)*rstep**2) N
(!20) c 8 T (XN\(idel1,idel2\) = XN\(idel1,idel2\) + trr) N
( 20     sumval  =  sumval + trr) p n
(        sumval  = sumval * alg) N
(        rhoval\(idel1,b,c,d,in\)=rhoval\(idel1,b,c,d,in\) + sumval) N
(48      ) S
(continue) K n
(50) p 8 T () S
(continue) K n
(60) p 8 T () S
(continue) K n
() p 8 T () N
(!) c 8 T (rhoval\(:,b,c,d,in\) = XN\(:,:\) * alg) N
() p 8 T ( bmax\() S
(in) k
(\) = ) p
(max) K
(\(b,bmax\() p
(in) k
(\)\)) p n
(   ) S 8 T ( cdmax\(1,b,in\)=c) N
(   ) S 8 T ( cdmax\(2,b,in\)=d) N
(100) S 8 T () S
(continue) K n
() p 8 T ( ) S
(do) K
( 110 b=0,bmax\() p
(in) k
(\)) p n
(   ) S 8 T ( ) S
(if) K
(\(cdmax\(1,b,in\)>=0) p
(.and.) K
(cdmax\(2,b,in\)>=0\) ) p
(then) K n
() p 8 T ( ) S
(write) K
(\(21,101\) in,jnnp,b) p n
(101) S 8 T () S
(format) K
(\(') p
(# Valence transition density to state no) str
(',) p n
(     x      i3,') S
( jnnp:) str
(',i3,') p
( b:) str
(',i3\)) p n
(        ) S
(write) K
(\(21,*\)') p
(real components) str
(') p n
() S 8 T () S
(do) K
( 105 idel1=1,ndel) p n
( ) S 8 T ( delta1 = \(idel1-1\)*stepdel) N
(105) S 8 T () S
(write) K
(\(21,106\) delta1,\(    \(dreal\(rhoval\(idel1,b,c,d,in\)\),) p n
(     X    d=0,) S
(max) K
(\(2,cdmax\(2,b,in\)\) \),) p n
(     X    c=0,) S
(max) K
(\(2,cdmax\(1,b,in\)\) \)) p n
(106) S 8 T () S
(format) K
(\(f8.3,9f10.6\)) p n
() S 8 T () S
(write) K
(\(21,*\) ') p
(&) str
(') p n
() S 8 T () S
(call) K
( ) p
(flush) l
(\(21\)) p n
() N
(        ) S
(write) K
(\(21,*\)') p
(imag components) str
(') p n
() S 8 T () S
(do) K
( 115 idel1=1,ndel) p n
( ) S 8 T ( delta1 = \(idel1-1\)*stepdel) N
(115) S 8 T () S
(write) K
(\(21,116\) delta1,\(    \(dimag\(rhoval\(idel1,b,c,d,in\)\),) p n
(     X    d=0,) S
(max) K
(\(2,cdmax\(2,b,in\)\) \),) p n
(     X    c=0,) S
(max) K
(\(2,cdmax\(1,b,in\)\) \)) p n
(116) S 8 T () S
(format) K
(\(f8.3,9f10.6\)) p n
(c) c 8 T (write\(22,*\) '&') N
() p 8 T () S
(call) K
( ) p
(flush) l
(\(22\)) p n
() N
() S 8 T () S
(endif) K n
(110) p 8 T () S
(continue) K n
() p 8 T () S
(return) K n
() p 8 T () S
(end) K n
() p n
() N
() N
() N
(**      ) c 16 T (real*8 rhoval\(ndel,0:mll,0:mll,0:mll,0:inel\),) N
(**    X) S 8 T () S 16 T (rhocm\(ndel,0:mll,0:inel\)) N
(**) S 8 T (integer cdmax\(2,0:mll,inel\),lvalmax\(0:inel\)) N
() p n
(c============================================) c n
(c Read 3B wf) N
(c=============================================) N
() p 8 T () S
(subroutine) K
( ) p
(readwf) L
(          ) p n
() N
(C  coupling order |[\(S1,S2\)S, \(LX,LY\)LL, Jnn], JC; JTOT>) c n
(C) N
(c ) S 8 T (where S1=S2=1/2 and JC = core spin \(zero for 6Li and 6He\).) N
(c       \(IWF.EQ.1\) OR \(IN=IWF-1.EQ.0\)   elastic) N
(c       \(IWF.GT.1\) OR \(IN=IWF-1.GT.1\)   inelastic  ) N
(c) N
() p 8 T () S
(use) K
( ) p
(wfns) l n
(        ) p
(use) K
( ) p
(scattering) l n
(        ) p
(use) K
( ) p
(trdens) l n
(      ) p
(IMPLICIT) K
( ) p
(REAL) K
(*8\(A-H,O-Z\)) p n
(      ) S
(real) K
(*8:: jlast=-1) p n
(      ) S
(real) K
(*8::iparlast=-2,elast=0.0) p n
(      ) S
(integer) K
( :: ijpi=-1) p n
(mstmain.f90) (Page 8/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (4/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(integer) K
(:: jimax=0,jfmax=0) p n
(C) c n
(c--------------------------------------------------------------) p n
(c  Dummy read to set dimensions:) c n
(        ) p
(write) K
(\(*,*\)') p
(Prereding wf to set dimensions) str
(') p n
(        ) S
(write) K
(\(*,*\)') p
(------------- J Pi components --------------) str
(') p n
(        ) S
(rewind) K
(\(nfl\)) p n
(        IWF=0) N
(        nma=0) N
(        mllmx=0) N
(11        ) S
(READ) K
(\(NFL,2,) p
(end) K
(=998\) NRXY,RSTEP,II,en,TN ) p n
(2       ) S
(format) K
(\(i4,f10.5,i4,f10.5,f10.6\)) p n
(c        write\(*,*\)'IWF=',IWF,'ens\(in\)=',ens0  ) c n
() p 8 T () S
(if) K
(\(NRXY) p
(.gt.) K
(MRXY\) ) p
(stop) K
( ') p
(MRXY) str
(') p n
(!) c 8 T (WN = 0.0) N
(!) S 8 T (VN = 0.0) N
() p 8 T (IWF=IWF+1) N
(        ) S
(IF) K
(\(IWF) p
(.EQ.) K
(1\)ITYTR=elastic) p n
(        ) S
(IF) K
(\(IWF) p
(.GT.) K
(1\)ITYTR=inelastic) p n
(      ) S
(DO) K
( 201 IVERT=0,0) p n
(      ) S
(READ) K
(\(NFL,*\) ) p n
(      ) S
(READ) K
(\(NFL,*\) ) p n
(     ) N
(      ima=0) N
(      ) S
(DO) K
( 111 IA=1,ma) p n
(      ) S
(READ) K
(\(NFL,915\) LX,LY,LL,S,JNN,IC,JC,JTOT ) p n
(      ) N
(      ) S
(if) K
( \() p
(max) K
(\(lx,ly\)>mllmx\) mllmx=2*) p
(max) K
(\(lx,ly\)) p n
(      ) N
(      ) N
() N
(      ) S
(if) K
(\(LX) p
(.lt.) K
(0\) ) p
(go to) K
( 121) p n
(      ima=ima+1) N
(      IPAR = \(-1\)**\(LX+LY\)) N
( ) S
(!     if \(\(ia.eq.1\).and.iwf<3\) write\(*,916\)JTOT,PSIGN\(IPAR+2\),EN) c n
(      ) p
(if) K
( \(\(jlast) p
(.ne.) K
(jtot\)) p
(.or.) K
(\(ipar) p
(.ne.) K
(iparlast\)) p
(.or.) K n
(     & \(elast<0) p
(.and.abs) K
(\(elast-en\)>0.001\)\) ) p
(then) K n
(         ijpi=ijpi+1) p n
(         ) S
(write) K
(\(*,916\)ijpi,JTOT,PSIGN\(IPAR+2\),EN) p n
(      ) S
(endif) K n
(      ) p n
(      ) S
(if) K
( \(ijpi>0\) ) p
(then) K n
(         jfmax=) p
(max) K
(\(jnn,jfmax\) ) p n
(      ) S
(else) K n
(         jimax=) p
(max) K
(\(jimax,jnn\)) p n
(      ) S
(endif) K n
() p n
(!       write\(*,916\)JTOT,PSIGN\(IPAR+2\),EN) c n
(916    ) p
(format) K
(\(') p
(Component: J,PI,=) str
(',i3,f5.1,a1,') p
( at) str
(',f8.3,') p
( MeV) str
('\)) p n
(      jlast=jtot) N
(      iparlast=ipar) N
(      elast=en) N
(      ) S
(if) K
(\(IC>1) p
(.or.) K
(JC>0.\) ) p
(then) K n
() p 8 T () S
(write) K
(\(6,*\) ') p
(This program not written for core excitation!) str
(') p n
() S 8 T () S
(stop) K n
() p 8 T () S
(endif) K n
(C) c n
(!40      RV\(1\) = 0.0) N
(        ) p
(DO) K
( 51 IX=1,NRXY) p n
(!) c 8 T (RV\(IX\) = \(IX-1\)*RSTEP) N
() p 8 T () S
(read) K
(\(NFL,*\) IIX) p n
(51) S 8 T () S
(READ) K
(\(NFL,*\) \(WF0,IY=1,NRXY\)) p n
() S 8 T (XN = 0.0) N
(        ) S
(DO) K
( 54 IX=1,NRXY) p n
(        ) S
(DO) K
( 54 IY=1,NRXY) p n
(54      ) S
(continue) K n
( ) p 8 T () S
(read) K
(\(NFL,*\) PNORM) p n
(81    ) S
(FORMAT) K
(\(') p
( Input ch.) str
(',I3,') p
( \( lx,ly,L,S=) str
(',4i3,') p
(\) norm =) str
(',f9.5\)) p n
(111   ) S
(CONTINUE) K n
(mstmain.f90) (Page 9/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(121   ) p
(if) K
( \(ima>nma\) nma=ima) p n
(      ) S
(read) K
(\(NFL,*\) TNORM) p n
(201   ) S
(CONTINUE) K n
(      indx = IWF-1) p n
(      ) S
(go to) K
( 11) p n
(998    NWF=IWF) N
(      ) N
() N
(c      write\(*,*\)'- Read',nwf,'states') c n
(c      write\(*,*\)'- Max number of components =',nma) N
(      ) p
(write) K
(\(*,*\)') p
(-----------------------------------------------------) str
(') p n
() N
(c *** Allocate according to determined bounds     ) c n
(      dmax=jimax+jfmax) p n
(      mll=dmax+isnx) N
(      ) S
(allocate) K
(\(wf\(nrxy,nrxy,nma,2\)\)) p n
(      ) S
(allocate) K
(\(tnq\(8,nma,2\)\)) p n
(      ) S
(allocate) K
(\(na\(nwf\)\)) p n
(      ) S
(allocate) K
(\(ens\(0:nwf\)\)) p n
(      ) S
(allocate) K
(\(rv\(mrxy\)\)) p n
(      ) S
(allocate) K
(\(rhocm\(ndel,0:mll,0:nwf\)\)) p n
(      ) S
(allocate) K
(\(rhoval\(ndel,0:mll,0:mll,0:mll,0:nwf\)\)) p n
(      ) S
(allocate) K
(\(bmax\(0:nwf\)\)) p n
(      ) S
(allocate) K
(\(cdmax\(2,0:mll,0:nwf\)\)) p n
(      ) S
(allocate) K
(\(lvalmax\(0:nwf\)\)) p n
(     ) N
(      ) S
(allocate) K
(\(ffcore\(mdelta,0:mll,0:nwf\)\)) p n
(      ) S
(allocate) K
(\(ffval\(mdelta,0:mll,0:isnx,0:mll,0:nwf\)\)) p n
(      ) S
(allocate) K
(\(ffcth\(nangles,0:mll,0:nwf\)\)) p n
(      ) S
(allocate) K
(\(ffvth\(nangles,0:mll,0:isnx,0:mll,0:nwf\)\)) p n
(      ) N
(     ) N
(      ) N
(c------------------------------------------------------------) N
(       ijpi=-1) N
(       jlast=-1) N
(       iparlast=-2) N
(       elast=0.0) N
(       ) S
(REWIND) K
( NFL    ) p n
(       ) S
(do) K
( IWF=1,nwf) p n
(        ) N
(! Amoro addition: nwf read to permit dynamic allocation) c n
(!1      READ\(NFL,2,end=999\) NWF,NRXY,RSTEP,II,ens\(IWF\),TN) N
(1      ) p
(READ) K
(\(NFL,2\) NRXY,RSTEP,II,en,TN ) p n
(          ens\(iwf-1\)=en) N
(                 ) S
(write) K
(\(*,*\)') p
(IWF=) str
(',IWF-1,') p
(ens\(in\)=) str
(',ens\(IWF-1\)  ) p n
(        ) S
(IF) K
(\(IWF) p
(.EQ.) K
(1\)ITYTR=elastic) p n
(        ) S
(IF) K
(\(IWF) p
(.GT.) K
(1\)ITYTR=inelastic) p n
(      ) S
(DO) K
( 200 IVERT=0,0) p n
(      ) S
(READ) K
(\(NFL,*\) ) p n
(      ) S
(READ) K
(\(NFL,*\) ) p n
(      ) S
(DO) K
( 110 IA=1,ma) p n
(      ) S
(READ) K
(\(NFL,915\) LX,LY,LL,S,JNN,IC,JC,JTOT) p n
() S 8 T () S
(if) K
(\(LX) p
(.lt.) K
(0\) ) p
(go to) K
( 120) p n
(915) S 8 T () S
(format) K
(\(3x,6i3,2f4.1\)) p n
() S 8 T (NA\(IWF\) = IA) N
() S 8 T (TNQ\(1,IA,ITYTR\) = LX) N
() S 8 T (TNQ\(2,IA,ITYTR\) = LY) N
() S 8 T (TNQ\(3,IA,ITYTR\) = LL) N
() S 8 T (TNQ\(4,IA,ITYTR\) = S) N
() S 8 T (TNQ\(5,IA,ITYTR\) = JNN) N
(!) c 8 T (TNQ\(6,IA,ITYTR\) = IC) N
(!) S 8 T (TNQ\(7,IA,ITYTR\) = nint\(2.*JC\)) N
(!) S 8 T (TNQ\(8,IA,ITYTR\) = nint\(2.*JTOT\)) N
(      IPAR = \(-1\)**\(LX+LY\)) p n
(      ) S
(if) K
( \(\(jlast) p
(.ne.) K
(jtot\)) p
(.or.) K
(\(ipar) p
(.ne.) K
(iparlast\)) p
(.or.) K n
(     & \(elast<0) p
(.and.abs) K
(\(elast-en\)>0.001\)\) ) p
(then) K n
(         ijpi=ijpi+1) p n
(         ) S
(write) K
(\(*,916\)ijpi,JTOT,PSIGN\(IPAR+2\),EN) p n
(mstmain.f90) (Page 10/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (5/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(endif) K n
(      jlast=jtot) p n
(      iparlast=ipar) N
(      elast=en) N
(      ) S
(if) K
(\(IA) p
(.eq.) K
(1\) ) p
(write) K
(\(KO,25\) JTOT,PSIGN\(IPAR+2\),en) p n
(25) S 8 T () S
(format) K
(\(//') p
( Wave function for J,pi =) str
(',F5.1,a1,f5.1/\)) p n
() N
(      ) S
(IF) K
(\(IPC) p
(.GE.) K
(5\) ) p
(WRITE) K
(\(KO,*\) ') p
(Have:) str
(',LX,LY,LL,S,JNN,IC,JC,JTOT) p n
(C) c n
(      ) p
(IF) K
(\(IPC) p
(.GE.) K
(4\)) p
(WRITE) K
(\(KO,*\) IA,LX,LY,LL,S,JNN,IC,JC,JTOT) p n
(30    ) S
(FORMAT) K
(\(') p
( Input ch.) str
(',I3,') p
( \( nos.) str
(',6i3,2f4.1,') p
(\) ) str
('\)) p n
(     ) N
(      ) S
(if) K
(\(IC>1) p
(.or.) K
(JC>0.\) ) p
(then) K n
() p 8 T () S
(write) K
(\(6,*\) ') p
(This program not written for core excitation!) str
(') p n
() S 8 T () S
(stop) K n
() p 8 T () S
(endif) K n
(C) c n
(40      RV\(1\) = 0.0) p n
(        ) S
(DO) K
( 50 IX=1,NRXY) p n
() S 8 T (RV\(IX\) = \(IX-1\)*RSTEP) N
() S 8 T () S
(read) K
(\(NFL,*\) IIX) p n
(50) S 8 T () S
(READ) K
(\(NFL,*\) \(WF\(IX,IY,IA,ITYTR\),IY=1,NRXY\)) p n
() S 8 T (XN = 0.0) N
(        ) S
(DO) K
( 53 IX=1,NRXY) p n
(        ) S
(DO) K
( 53 IY=1,NRXY) p n
() S 8 T () S
(if) K
(\(IVERT) p
(.eq.) K
(0\) XN = XN + WF\(IX,IY,IA,ITYTR\)**2 * RSTEP**2) p n
(53) S 8 T () S
(if) K
(\(IVERT) p
(.gt.) K
(0\) XN = XN + WF\(IX,IY,IA,ITYTR\) * ) p n
(     X) S 8 T () S 16 T (RV\(IX\)*RV\(IY\)*RSTEP**2 *FPI) N
() N
( ) S 8 T () S
(read) K
(\(NFL,*\) PNORM) p n
(      ) S
(IF) K
(\(IPC) p
(.GE.) K
(4\) ) p
(WRITE) K
(\(KO,*\) ') p
(Input partial integral:) str
(',) p
(real) K
(\(XN\)) p n
(      ) S
(IF) K
(\(IPC) p
(.eq.) K
(3\)) p
(WRITE) K
(\(KO,80\) IA,LX,LY,LL,S,XN) p n
(80    ) S
(FORMAT) K
(\(') p
( Input ch.) str
(',I3,') p
( \( lx,ly,L,S=) str
(',4i3,') p
(\) norm =) str
(',f9.5\)) p n
(110   ) S
(CONTINUE) K n
(120 ) p 8 T () S
(read) K
(\(NFL,*\) TNORM) p n
(      ) S
(IF) K
(\(IPC) p
(.GE.) K
(3\) ) p
(WRITE) K
(\(KO,*\) ') p
(Input summed integrals:) str
(',) p
(real) K
(\(TNORM\)) p n
(200   ) S
(CONTINUE) K n
(      indx = IWF-1) p n
(      ) S
(write) K
(\(*,*\)') p
(Calling dens with indx=) str
(',indx) p n
() N
(      ) N
(      ) S
(if) K
( \(ijpi) p
(.eq.) K
(0\) ) p
(then) K n
(         ) p
(call) K
( ) p
(dens) l
(\(indx\)) p n
(      ) S
(else) K
( ) p
(if) K
( \(quais\(ijpi\)>0\) ) p
(then) K n
(         ) p
(call) K
( ) p
(dens) l
(\(indx\)) p n
(      ) S
(endif) K n
() p n
(      ) S
(enddo) K n
() p n
(      ) N
(c************************************************) c n
(c      CHECK FOR READING THE ENERGIES PROPERLY) N
(c************************************************) N
(      ) p
(do) K
( 500  in=0,NWF-1) p n
(      ) S
(write) K
(\(*,*\)') p
(in) str
(',in, ') p
(ens\(in\)) str
(', ens\() p
(in) k
(\)) p n
( 500  ) S
(continue) K n
(  ) p n
() N
(      ) S
(RETURN) K n
(      ) p
(END) K n
() p n
() N
() N
() N
(      ) S
(subroutine) K
( ) p
(dens) L
(\() p
(in) k
(\)) p n
(c***********************************************************************) c n
(c     Calculates halo density and core cm density distribution) N
(c     in the momentum space grid for the scattering and in theta grid) N
(c------------------------------------------------------------------------) p n
(mstmain.f90) (Page 11/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(use) K
( ) p
(parameters) l n
(      ) p
(use) K
( ) p
(wfns) l n
(      ) p
(use) K
( ) p
(scattering) l n
(      ) p
(use) K
( ) p
(trdens) l n
(      ) p
(use) K
( ) p
(constants) l n
(      ) p
(implicit) K
( ) p
(real) K
(*8 \(a-h,o-z\)) p n
(      ) S
(complex) K
(*16 wxxi) p n
() N
() N
() S 8 T () S
(call) K
( ) p
(cmdens) l
(\() p
(in) k
(\)        ) p n
( ) S 8 T () S
(call) K
( ) p
(valdens) l
(\() p
(in) k
(\)) p n
() N
(      ) S
(if) K
( \(irho) p
(.eq.) K
(0\)) p
(then) K n
(        ) p
(allocate) K
(\(rhoaux\(ndel\)\)) p n
(        ) S
(allocate) K
(\(qdelta\(ndel\)\)) p n
(        ) S
(do) K
( 20 ll=0,mll) p n
(        ) S
(do) K
( 5 i=1,ndel) p n
(        rhoaux\(i\) = rhocm\(i,ll,in\)) N
(        qdelta\(i\) = \(i-1\)*stepdel) N
(        ) S
(if) K
(\(in) p
(.eq.) K
(0) p
(.and.) K
(ll) p
(.eq.) K
(0\)) p
(then) K n
(        ren = 1/rhocm\(1,0,0\)) p n
(        rhoaux\(i\) = ren * rhoaux\(i\)) N
(        ) S
(endif) K n
( 5      ) p
(continue) K
(   ) p n
() N
(        ) S
(if) K
(\(in) p
(.eq.) K
(0\)) p
(then) K n
(           ) p n
(        ) S
(do) K
( 6 i=1,ndel) p n
(        ) S
(write) K
(\(24,*\)qdelta\(i\),') p
(rhocm) str
(', rhocm\(i,0,in\)) p n
( 6      ) S
(continue) K
(  ) p n
(        ) S
(endif) K
( ) p n
() N
(        ) S
(call) K
( ) p
(flush) l
(\(24\)) p n
(        ) N
() S 8 T () S
(do) K
( 10 iq=1,mdelta) p n
() S 8 T (q = radxisd\(iq\)) N
(        ffcore\(iq,ll,in\) = wxxi\(q,qdelta,rhoaux,ndel,ndel\)) N
( 10) S 8 T () S
(continue) K n
() p n
(        ) N
(!        write\(60,*\)ll,in) c n
(        ) p
(do) K
( 15  ith = 1,nangles) p n
(        th = thmin + dth*\(ith-1\)) N
(        thrad = th*pi/180.) N
(        cthna = ) S
(cos) K
(\(thrad\)) p n
(        qq = ) S
(sqrt) K
(\(2*k0*k0*\(1-cthna\)\)) p n
(        ffcth\(ith,ll,in\)  = wxxi\(qq,qdelta,rhoaux,ndel,ndel\)) N
(       ) N
( 15     ) S
(continue) K n
() p n
( 20     ) S
(continue) K n
() p n
() N
(        ) S
(allocate) K
(\(rhoauxp\() p
(max) K
(\(ndel,mdelta\)\)\)) p n
(        ) S
(do) K
( 30 ic=0,mll) p n
(        ) S
(do) K
( 30 ib=0,isnx) p n
(        ) S
(do) K
( 30 id=0,mll        ) p n
(        ) S
(do) K
( 35 i=1,ndel) p n
(        rhoaux\(i\) = dreal\(rhoval\(i,ib,ic,id,in\)\)) N
(        rhoauxp\(i\) = dimag\(rhoval\(i,ib,ic,id,in\)\)) N
(        qdelta\(i\) = \(i-1\)*stepdel) N
( 35     ) S
(continue) K
( ) p n
(    ) N
(        ) N
() S 8 T () S
(do) K
( 40 iq=1,mdelta) p n
() S 8 T (q = radxisd\(iq\)) N
(        a1 = wxxi\(q,qdelta,rhoaux,ndel,ndel\)) N
(        a2 = wxxi\(q,qdelta,rhoauxp,ndel,ndel\)) N
(        ffval\(iq,ic,ib,id,in\) = a1 + zz * a2) N
(mstmain.f90) (Page 12/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (6/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (13-14) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( 40) p 8 T () S
(continue) K n
() p n
(        ) S
(do) K
( 45  ith = 1,nangles) p n
(        th = thmin + dth*\(ith-1\)) N
(        thrad = th*pi/180.) N
(        cthna = ) S
(cos) K
(\(thrad\)) p n
(        qq = ) S
(sqrt) K
(\(2*k0*k0*\(1-cthna\)\)) p n
(        a1 = wxxi\(qq,qdelta,rhoaux,ndel,ndel\)) N
(        a2 = wxxi\(qq,qdelta,rhoauxp,ndel,ndel\)) N
(        ffvth\(ith,ic,ib,id,in\)= a1 + zz * a2) N
( 45     ) S
(continue) K n
() p n
( 30     ) S
(continue) K n
() p n
(      ) S
(else) K
( ) p n
(        ) S
(write) K
(\(99,*\)') p
(irho gt 0) str
(') p n
(        ) S
(stop) K n
(      ) p
(end) K
( ) p
(if) K n
() p n
() N
(106) S 8 T () S
(format) K
(\(f8.3,9f8.3\)) p n
(155     ) S
(format) K
(\(f8.3,2f10.6\)) p n
(      ) S
(deallocate) K
(\(rhoauxp\)) p n
(      ) S
(deallocate) K
(\(rhoaux\)) p n
(      ) S
(deallocate) K
(\(qdelta\)) p n
(      ) S
(return) K n
(      ) p
(end) K n
() p n
() N
(      ) S
(subroutine) K
( ) p
(test) L
(\(\)) p n
(c***********************************************************************) c n
() p n
(      ) S
(use) K
( ) p
(parameters) l n
(      ) p
(use) K
( ) p
(wfns) l n
(      ) p
(use) K
( ) p
(scattering) l n
(      ) p
(use) K
( ) p
(trdens) l n
(      ) p
(implicit) K
( ) p
(real) K
(*8 \(a-h,o-z\)) p n
(      ) S
(complex) K
(*16 wxxi) p n
() N
() N
(!***    write interpolated densities in q and th grid) c n
(        ) p
(write) K
(\(40,*\)') p
(core interpolated in q grid) str
(') p n
( ) S 8 T () S
(do) K
( 140 iq=1,mdelta) p n
() S 8 T (q = radxisd\(iq\)       ) N
(  ) S 8 T () S
(write) K
(\(40,155\) q,ffcore\(iq,1,3\), ffcore\(iq,0,0\)) p n
( 140    ) S
(continue) K n
(        ) p
(write) K
(\(40,*\)') p
(valence  interpolated in q grid) str
(') p n
( ) S 8 T () S
(do) K
( 145 iq=1,mdelta) p n
() S 8 T (q = radxisd\(iq\)       ) N
(  ) S 8 T () S
(write) K
(\(40,106\) q,\(    \(dreal\(ffval\(iq,ic,1,id,2\)\),) p n
(     X    id=0,2 \),  ic=0,2 \)) N
( 145  ) S
(continue) K n
(      ) p n
(        ) S
(do) K
( 150  ith = 1,nangles) p n
(        th = thmin + dth*\(ith-1\)) N
() S 8 T () S
(write) K
(\(23,106\) th,\(    \(dreal\(ffvth\(ith,ic,1,id,2\)\),) p n
(     X    id=0,2 \),  ic=0,2 \)) N
(        ) S
(write) K
( \(24,155\)th,ffcth\(ith,1,3\), ffcth\(ith,0,0\)) p n
(        aux1 = ffcth\(ith,1,3\)**2) N
(        aux2 = 1 - ffcth\(ith,0,0\)**2) N
(        ) S
(write) K
( \(25,155\)th, aux1,aux2) p n
(150     ) S
(continue) K
( ) p n
() N
(106) S 8 T () S
(format) K
(\(f8.3,9f8.3\)) p n
(155     ) S
(format) K
(\(f8.3,2f10.6\)) p n
() N
() N
(      ) S
(return) K n
(      ) p
(end) K n
(mstmain.f90) (Page 13/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() N
() N
(       ) S
(subroutine) K
( ) p
(ptheta) L
(\() p
(in) k
(\)) p n
(!         subroutine ptheta\(in,pleg\)) c n
(c************************************************************************) N
(       ) p
(use) K
( ) p
(wfns) l n
(       ) p
(use) K
( ) p
(scattering) l n
(       ) p
(use) K
( ) p
(lfac) l n
(       ) p
(implicit) K
( ) p
(real) K
(*8\(a-h,o-z\)) p n
(!       real*8::pl\(mllmx+2,2*\(mllmx+2\)+1\)) c n
(       ) p
(real) K
(*8, ) p
(allocatable) K
(::aux\(:,:\)) p n
() N
(!       real*8 PL\(20,40\)) c n
(!       real*8 aux\(40,40\)) N
(!       real*8 pleg\(500\)) N
(!       common/lfac/fact\(21\)) N
(       ) p n
(       ) S
(allocate) K
(\(pleg\(nangles\)\)) p n
(       jnnp = TNQ\(5,na\(in+1\),in+1\)) N
(!      write\(10,*\)'jnnp=',jnnp) c n
(       mnnt = 2*jnnp + 1) p n
(       NJ = 2*jnnp) N
(       MJ = 2*NJ + 1) N
() N
(       ) S
(allocate) K
(\(aux\(nj,mj\)\)) p n
(!       NAMT = 20) c n
(!       if \(NAMT.lt.MJ\) Stop ) N
() p n
(       ) S
(do) K
( 50 nc = 0, 2*jnnp) p n
(!      do 50 nc=0,0) c n
(       nct = 2*nc + 1) p n
(       ) S
(do) K
( 55 l = 1, nct) p n
(       ngama = - nc + \(l-1\)) N
(       sum1 = 0.d0 ) N
(       ) S
(do) K
( 100 i=1,mnnt) p n
(       mnn = - jnnp + \(i-1\)) N
(       ) S
(do) K
( 150 j=1,mnnt) p n
(       mnnp = - jnnp + \(j-1\)) N
(       alg1 = cleb6\(jnnp+z, -mnn+z, jnnp+z, mnnp+z, nc+z, ngama+z\)) N
(       phase = - mnn - 2*mnnp + \(2*jnnp\)) N
(       alg1 = alg1 * \(-1\)**phase ) N
(       sum1 = sum1 + alg1) N
( 150   ) S
(continue) K n
( 100   ) p
(continue) K n
(       aux\(nc,ngama\) = sum1) p n
(       faux = ) S
(exp) K
(\(\(fact\(nc-ngama+1\) -fact\(nc +ngama+1\)\)*0.5\) ) p n
( 55    ) S
(continue) K n
( 50    ) p
(continue) K n
() p n
(       ) S
(do) K
( 200 ith = 1,nangles) p n
(       th = thmin + dth*\(ith-1\)) N
(       thrad = th*pi/180.) N
(       cthna = ) S
(cos) K
(\(thrad\)) p n
(!       call PLM\(cthna,NJ,MJ,NAMT,PL\)) c n
(       ) p
(call) K
( ) p
(PLM) l
(\(cthna,NJ,MJ,NAMT\)) p n
(       sum2 = 0.d0) N
(       ) S
(do) K
( 250 nc = 0, 2*jnnp) p n
(!      do 250 nc=0,0) c n
(       nct = 2*nc + 1) p n
(       ) S
(do) K
( 255 l = 1, nct) p n
(       ngama = - nc + \(l-1\)) N
(       faux = ) S
(exp) K
(\(\(fact\(nc-ngama+1\) -fact\(nc +ngama+1\)\)*0.5\)  ) p n
(       faux = faux  * \(-1\)**ngama ) N
(       alg2 = cleb6\(jnnp+z, z, jnnp+z, z, nc+z, z\)) N
(       ) S
(if) K
( \(ngama) p
(.lt.) K
(0\) ) p
(then) K n
(       ngamapl = - ngama) p n
(       plaux = PL\(nc+1,ngamapl+1\)*\(-1\)**ngamapl) N
(       plaux = plaux*) S
(exp) K
(\(\(fact\(nc-ngamapl+1\)-fact\(nc +ngamapl+1\)\)\)) p n
(mstmain.f90) (Page 14/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (7/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (15-16) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       ) p
(else) K n
(       plaux = PL\(nc+1,ngama+1\)) p n
(       ) S
(endif) K n
(       sum2 = sum2 + alg2*aux\(nc,ngama\)*faux*plaux) p n
( 255   ) S
(continue) K n
( 250   ) p
(continue) K n
(       pleg\(ith\) = sum2) p n
( 200   ) S
(continue) K n
() p n
(       ) S
(do) K
( 400 ith = 1,nangles) p n
(       th = thmin + dth*\(ith-1\)) N
(       thrad = th*pi/180.) N
(       cthna = ) S
(cos) K
(\(thrad\)) p n
(!       call PLM\(cthna,NJ,MJ,NAMT,PL\)) c n
(        ) p
(call) K
( ) p
(PLM) l
(\(cthna,NJ,MJ,NAMT\)) p n
(       ) S
(do) K
( 450 nc = 0, 2*jnnp) p n
(!      do 450 nc=0,0) c n
(       nct = 2*nc + 1) p n
(       ) S
(do) K
( 455 l = 1, nct) p n
(       ngama = - nc + \(l-1\)) N
(       ) S
(if) K
( \(ngama) p
(.lt.) K
(0\) ) p
(then) K n
(       ngamapl = - ngama) p n
(       plaux = PL\(nc+1,ngamapl+1\)*\(-1\)**ngamapl) N
(       ) S
(else) K n
(       plaux = PL\(nc+1,ngama+1\)) p n
(       ) S
(endif) K n
(!      write\(10,*\)'plaux=', nc,ngama,plaux) c n
( 455   ) p
(continue) K n
( 450   ) p
(continue) K n
( 400   ) p
(continue) K n
(       ) p
(deallocate) K
(\(aux\)) p n
(       ) S
(return) K n
(       ) p
(end) K n
() p n
() N
() N
() N
(       ) S
(subroutine) K
( ) p
(statescb) L
(\(jnnp,lxp,lyp\)) p n
(c************************************************************************) c n
(c      This subroutine verifies if a particular Jnn+ state will) N
(c      contribute to the scattering. Presently up to eight states) N
() p n
(       ) S
(use) K
( ) p
(scattering) l n
(       ) p
(implicit) K
( ) p
(real) K
(*8\(a-h,o-z\)) p n
(       ) S
(integer) K
( parityf, parin) p n
() N
(       parityf = \(-1\)**\(lxp+lyp\)) N
(       jnncb = 1) N
(       eps = 0.1) N
(c      go to 60) c n
(       ) p
(write) K
(\(*,*\)') p
(states) str
(',jnnp, parityf) p n
(       ) S
(do) K
( 50 j=1,nustates) p n
(       parin = \(-1\)**\(1+partyin\(j\)\)      ) N
(       aux1 = ) S
(abs) K
(\(Jnnp-Jnnpin\(j\)\)) p n
(       aux2 = ) S
(abs) K
(\(parityf - parin\)) p n
(       ) S
(write) K
(\(*,*\)') p
(states \(j\)) str
(',Jnnpin\(j\),parin) p n
(       ) S
(if) K
(\(aux1) p
(.lt.) K
(eps) p
(.and.) K
(aux2) p
(.lt.) K
(eps\)) p
(then) K n
(       jnncb=istatcb\(j\)) p n
(       ) S
(write) K
(\(*,*\) ') p
(jnncb=) str
(',jnncb) p n
(       ) S
(go to) K
( 60) p n
(       ) S
(endif) K n
( 50    ) p
(continue) K n
(c 60    write\(*,*\)'jnncb=',jnncb) c n
( 60    ) p
(continue) K n
(       ) p
(return) K n
(       ) p
(end) K n
(       ) p n
() N
() N
(mstmain.f90) (Page 15/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() N
(       ) S
(subroutine) K
( ) p
(tncore) L
(\(elab,) p
(type) K
(\)) p n
(****************************************************************************) c n
(       ) p
(use) K
( ) p
(wfns) l n
(       ) p
(use) K
( ) p
(scattering) l n
(       ) p
(use) K
( ) p
(tatheta) l n
(       ) p
(use) K
( ) p
(constants) l n
(       ) p n
(       ) S
(implicit) K
( ) p
(real) K
(*8\(a-h,o-z\)) p n
(       ) S
(integer) K
(::) p
(type) K n
(       ) p
(real) K
(*8,) p
(allocatable) K
(::qcore\(:\)) p n
(       ) S
(real) K
(*8 :: e14) p n
(       ) S
(complex) K
(*16 ::wxxi) p n
(       ) S
(complex) K
(*16 ::tncchk) p n
(       ) S
(logical) K
(::ifmst=.true.) p n
(       ) N
(       zz = ) S
(cmplx) K
(\(0.d0,1.d0\)) p n
(       nang=nangles) N
(c **** calculates tNA \(**SCATTERING AMPLITUDES**\) from MST - U on-shell) c n
(c ***  \( calls MSOamp program \)) N
(c *** or reading S-matrix externally) N
() p n
(      ) S
(write) K
(\(*,*\)') p
(Cluster type=) str
(',) p
(type) K n
(      ) p
(select case) K
(\() p
(type) K
(\)) p n
(c--------------------------------------------------------------) N
(         ) S
(case) K
(\(0\) ) p
(!T-matrix calculated by lptps subroutine) c n
(c--------------------------------------------------------------      ) p n
(       ) S
(write) K
(\(*,*\)') p
( - Calling MSO with e14=) str
(',elab) p n
(       ) S
(call) K
( ) p
(lptps) l
(\(elab,ifmst\)) p n
(       ) S
(allocate) K
(\(qcore\(noangs\)\)) p n
(       ) S
(do) K
( 100 i=1,noangs      ) p n
(!       read\(80,*\)theta\(i\),tncre,tncimag) c n
(!       tnct\(i\) = tncre+zz*tncimag) N
(       tncre=) p
(real) K
(\(tnct\(i\)\)) p n
(       tncimag=dimag\(tnct\(i\)\)) N
(       x = ) S
(cos) K
(\(theta\(i\)*pi/180.\)) p n
(       qcore\(i\) = kcore*) S
(sqrt) K
(\(2 - 2*x\)) p n
(      ) N
(       ) S
(write) K
(\(85,') p
(\(1i3,5g14.6\)) str
('\)i,qcore\(i\),tncre,tncimag ) p
(!,tnct) c n
(       ) p
(call) K
( ) p
(flush) l
(\(85\)) p n
( 100   ) S
(continue) K n
(       ) p
(write) K
(\(85,*\)') p
(-------------------------------------) str
(') p n
(       ) N
(c **** interpolates to obtain the tmatrix on the **q** grid for MST - T) c n
(       ) p
(allocate) K
(\(ssctna\(mdelta\)\)) p n
(       ) S
(do) K
( 200 iqrr = 1, mdelta) p n
(       qrr = radxisd\(iqrr\)) N
(       ssctna\(iqrr\) = wxxi\(qrr,qcore,tnct,noangs,noangs\)) N
(       ) S
(write) K
(\(85,*\)qrr, dreal\(ssctna\(iqrr\)\), dimag\(ssctna\(iqrr\)\)) p n
( 200   ) S
(continue) K n
(       ) p
(call) K
( ) p
(flush) l
(\(85\)) p n
() N
(c **** interpolates to obtain the tmatrix on the **th** grid for MST - T) c n
(       ) p
(allocate) K
(\(tnath\(nangles\),stat=istat\)) p n
(       ) S
(if) K
( \(istat>0\) ) p
(then) K n
(          ) p
(write) K
(\(*,*\) ') p
(!!!!!Allocating TNATH failed!.Aborting) str
(';) p
(stop) K n
(       ) p
(endif) K n
(       ) p
(do) K
( 300  ith = 1,nangles) p n
(       th = thmin + dth*\(ith-1\)) N
(       thrad = th*pi/180.) N
(       cthna = ) S
(cos) K
(\(thrad\)) p n
(!!!       qq = sqrt\(2*k0*k0*\(1-cthna\)\) !!!WRONG??????????) c n
(     ) p n
(       qq = ) S
(sqrt) K
(\(2*kcore*kcore*\(1-cthna\)\)) p n
(101    ) S
(format) K
(\(7f12.6\)) p n
(       tnath\(ith\) = wxxi\(qq,qcore,tnct,noangs,noangs\)) N
( 300   ) S
(continue) K n
() p n
(mstmain.f90) (Page 16/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (8/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (17-18) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(c------------------------------------------------------------) p n
(       ) S
(case) K
( default ) p
(!T-matrix from S-matrix read externally) c n
(c------------------------------------------------------------) p n
(       ns=) S
(type) K n
(       ) p
(write) K
(\(*,*\)') p
(!!!!!!!!!!!nangles=) str
(',nangles) p n
(       ) S
(if) K
( \() p
(allocated) K
(\(tnath\)\) ) p
(deallocate) K
(\(tnath\)) p n
(       ) S
(allocate) K
(\(tnath\(nangles\),stat=istat\)) p n
(       ) S
(call) K
( ) p
(readsmat) l
(\(ns,nangles,tnath\)) p n
() N
(!       case default) c n
(!          write\(*,*\)'ERROR: ttype',type,'not used. Aborting') N
(!          stop) N
(       ) p
(end) K
( select ) p n
() N
(c ***) c n
(c ***  calculates cross section for the core as a check      ) N
(       ) p
(do) K
( 400 ith = 1,nangles) p n
(       th = thmin + dth*\(ith-1\)) N
(       thrad = th*pi/180.) N
(       cthna = ) S
(cos) K
(\(thrad\)) p n
(       qq = ) S
(sqrt) K
(\(2*kcore*kcore*\(1-cthna\)\)) p n
(       ) S
(if) K
( \() p
(type.eq.) K
(0\) ) p
(then) K n
(          tncchk = wxxi\(qq,qcore,tnct,noangs,noangs\)) p n
(       ) S
(else) K n
(          tncchk = tnath\(ith\)) p n
(       ) S
(endif) K n
(       xscore = tncchk * ) p
(conjg) K
(\(tncchk\)*10) p n
(       ) S
(write) K
(\(75,') p
(\(f8.5,2e12.3\)) str
('\)th,xscore) p n
( 400   ) S
(continue) K n
(       ) p
(call) K
( ) p
(flush) l
(\(75\)) p n
(       ) S
(return) K n
(       ) p
(end) K n
() p n
(!===============================================================) c n
(c ***  Calculates TNN tensor amplitudes by calling NNAMP program) N
(!===============================================================) N
(       ) p
(subroutine) K
( ) p
(tntensor) L
(\(tcm,) p
(type) K
(\)) p n
(         ) S
(use) K
( ) p
(amps) l n
(         ) p
(use) K
( ) p
(parameters) l n
(         ) p
(use) K
( ) p
(wfns) l n
(         ) p
(use) K
( ) p
(scattering) l n
(         ) p
(use) K
( ) p
(nnamps) l n
(         ) p
(use) K
( ) p
(j2) l n
(         ) p
(use) K
( ) p
(constants) l n
(          ) p
(implicit) K
( ) p
(real) K
(*8\(a-h,o-z\) ) p n
(         ) S
(logical) K
(:: ifmst=.true.) p n
(         ) S
(integer) K
(::ifkq=1,) p
(type) K n
(         ) p
(real) K
(*8::tcm) p n
(         ) S
(real) K
(*8:: ms1, ms1p,sqmax,bqmax) p n
(         ) S
(real) K
(*8,) p
(allocatable) K
(::th\(:\)) p
(!,xq\(:\)) c n
(         ) p
(real) K
(*8,) p
(pointer) K
(::xq\(:\)) p n
(         ) S
(complex) K
(*16,) p
(pointer) K
(:: tnaux\(:\)) p n
(         ) S
(complex) K
(*16,) p
(allocatable) K
(,) p
(target) K
(::mf\(:,:,:,:,:\)) p n
(         ) S
(complex) K
(*16 ::aux, taux, auxp,wxxi) p n
(         ) S
(dimension) K
( sred\(0:1\)) p
(!,th\(nthin\),xq\(nthin\),sred\(0:1\)) c n
(         ) p
(complex) K
(*16,) p
(allocatable) K
(::tabkq\(:,:,:,:,:\)) p n
(        ) N
(         hat\(i\) = ) S
(sqrt) K
(\() p
(real) K
(\(2*I+1\)\)) p n
(         ) S
(namelist) K
( /amp/ ifkq,xkmax,xqmax,dk,dq,theta,nth,itype,icase) p n
(         zz = ) S
(cmplx) K
(\(0.d0,1.d0\)) p n
(         sred\(0\) = 1.) N
(         sred\(1\) = ) S
(sqrt) K
(\(3.\)) p n
(         itkqopt = 1.) N
(         s1 = 0.5) N
() N
(c We need to know nangles for allocatable variables) c n
(         ) p
(close) K
(\(10\) ) p n
(         ) S
(open) K
(\(10,file=') p
(nnamp.in) str
(',status=') p
(old) str
('\)         ) p n
(         ) S
(read) K
(\(10,nml=amp\)) p n
(mstmain.f90) (Page 17/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         nthin=nth) p n
(         ) S
(close) K
(\(10\)) p n
(         ) N
(         ) S
(write) K
(\(99,*\)') p
(Allocating tabkq) str
(',isnx,isnx,1,ikqx,ikqx,nangles) p n
(         ) N
(         ) S
(allocate) K
(\(tabkq\(0:isnx,0:isnx,0:ikqx,-ikqx:ikqx,nangles\),) p n
(     &           stat=istat\)) N
(         ) S
(if) K
(\(istat>0\) ) p
(then) K
( ) p n
(            ) S
(write) K
(\(*,*\) ') p
(Could not allocate memory for tabkq) str
(';) p
(stop) K n
(         ) p
(end) K
( ) p
(if) K n
(         ) p
(allocate) K
(\(tnnu\(0:isnx,-isnx:isnx,0:1,0:1,nangles\)\)) p n
(         ) S
(allocate) K
(\(tauvv\(nangles,0:mllmx,-mllmx:mllmx,0:isnx,0:isnx\)\)  ) p n
(         ) S
(allocate) K
(\(tauvc\(nangles,0:isnx,-isnx:isnx\)\)) p n
() N
(         ) S
(if) K
( \() p
(allocated) K
(\(mf\)\)) p
(deallocate) K
(\(mf\)) p n
(         ) S
(allocate) K
(\(mf\(0:isnx,0:isnx,0:ikqx,-ikqx:ikqx,nthin\)\)  ) p n
(         mf=0 ) S
(!initialize) c n
(         ) p
(write) K
(\(99,*\)') p
(+ Allocating th,xq with) str
(',nthin,') p
( angles) str
(') p n
(         ) S
(allocate) K
(\(th\(nthin\)\)) p n
(!         allocate\(xq\(nthin\)\)) c n
(!         allocate\(tnaux2\(nthin\)\)) N
() p n
(         ) S
(if) K
( \(tcm<1.e-5\) ) p
(then) K n
(            ) p
(write) K
(\(*,*\) ') p
(**ERROR*** Energy not specified!. Aborting) str
(') p n
(            ) S
(stop) K n
(         ) p
(endif) K n
(         ) p
(write) K
(\(*,) p
(fmt) K
(=') p
(\(" - Calling ampnn with tcm=",f8.4\)) str
('\)tcm) p n
(        ) N
() N
(c Type of S-matrix) c n
(c type=0: calculate NN T-matrix calling ampnn) N
(c type>0: Reads S-matrix from unit type) N
(         ) p
(select case) K
(\() p
(type) K
(\)) p n
(         ) S
(case) K
(\(0\)) p n
(         ) N
(         sqmax=) S
(sqrt) K
(\(2d0*k0*k0*\(1d0-) p
(cos) K
(\(nangles*pi/180\)\)\)) p n
(         bqmax=k0) N
(         ) S
(write) K
(\(99,*\)') p
(-> tntensor: Entering ampnn) str
(') p n
(         ) S
(call) K
( ) p
(flush) l
(\(99\)) p n
(         ) S
(call) K
( ) p
(ampnn) l
(\(tcm,ifmst,sqmax,bqmax,ifkq\)) p n
(         ) S
(write) K
(\(99,*\)') p
(<- tntensor: Exiting ampnn) str
(') p n
(          ) S
(call) K
( ) p
(flush) l
(\(99\)) p n
(         ) N
(         xq=>xxq) N
(         ) N
() N
(         mfon\(0,0,:,0,0,:\)=mfon\(0,0,:,0,0,:\)*k0000) N
(         mfon\(1,1,:,0,0,:\)=mfon\(1,1,:,0,0,:\)*k1100) N
(         mfon\(1,1,:,0,0,:\)=mfon\(1,1,:,0,0,:\)*k1100) N
(         mfon\(0,1,:,1,1,:\)=mfon\(0,1,:,1,1,:\)*k0111) N
(         mfon\(1,1,:,2,0,:\)=mfon\(1,1,:,2,0,:\)*k1120) N
(         mfon\(1,1,:,2,1,:\)=mfon\(1,1,:,2,1,:\)*k1121) N
(         mfon\(1,1,:,2,2,:\)=mfon\(1,1,:,2,2,:\)*k1122) N
() N
(         mfon\(1,0,0,1,1,:\) = mfon\(0,1,0,1,1,:\)) N
(         mfon\(1,0,1,1,1,:\) = mfon\(0,1,1,1,1,:\)) N
() N
() N
(         ) S
(if) K
( \(zp) p
(.eq.) K
(z2\) ) p
(then) K n
(            mf=mfon\(:,:,1,:,:,:\) ) p
(! pp / nn) c n
(            ) p
(write) K
(\(99,*\)') p
(-Tntensor for pp/nn) str
(') p n
(         ) S
(else) K
( ) p n
(            mf=\(mfon\(:,:,0,:,:,:\)+mfon\(:,:,1,:,:,:\)\)/2. ) S
(!pn) c n
(            ) p
(write) K
(\(99,*\)') p
(-Tntensor for pn) str
(') p n
(         ) S
(endif) K n
(        ) p n
(         ) S
(if) K
( \() p
(allocated) K
(\(mfon\)\) ) p
(then) K
( ) p n
(            ) S
(write) K
(\(99,*\)') p
( - Deallocating mfon) str
(') p n
(            ) S
(deallocate) K
(\(mfon\)) p n
(mstmain.f90) (Page 18/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (9/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (19-20) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         ) p
(else) K n
(            ) p
(write) K
(\(*,*\)') p
( ERROR \(tntensor\): mfon not allocated!) str
(') p n
(            ) S
(stop) K n
(         ) p
(endif) K n
(         ) p
(call) K
( ) p
(flush) l
( \(99\)) p n
(         ) N
(c Read S-matrix externally) c n
(         ) p
(case) K
( default ) p
(!read nucleon-nucleus S-matrix) c n
(         ) p
(if) K
( \() p
(allocated) K
(\(tnath\)\) ) p
(deallocate) K
(\(tnath\)) p n
(         ) S
(allocate) K
(\(tnath\(nangles\),stat=istat\)) p n
(         ) S
(call) K
( ) p
(readsmat) l
(\() p
(type) K
(,nangles,tmat\)) p n
(         ) S
(end) K
( select) p n
(         ) N
() N
(         ) N
(         ) N
(c--------------------------------------------------) N
(c **** interpolates to obtain the tmatrix on the required theta grid for MST ) c n
() p n
(       ) S
(do) K
( 191 iaj=0,isnx) p n
(       ) S
(do) K
( 191 ibj=0,isnx) p n
(       ) S
(do) K
( 191 ikj=) p
(abs) K
(\(iaj-ibj\),iaj+ibj ) p n
(       ) S
(do) K
( 191 iqj=0,ikj) p n
(       ) S
(if) K
(\(iaj) p
(.eq.) K
(1) p
(.and.) K
(ibj) p
(.eq.) K
(1) p
(.and.) K
(ikj) p
(.eq.) K
(1\)) p
(go to) K
( 191) p n
(       ikq = ikj + iqj) N
(       ) S
(if) K
(\(ikq) p
(.eq.) K
(1\)) p
(go to) K
( 191) p n
() N
(       tnaux=>mf\(iaj,ibj,ikj,iqj,:\)) N
() N
(       ) S
(do) K
( 200 iqrr = 1, nangles) p n
(        thet = thmin + dth*\(iqrr-1\)) N
(        thrad = thet*pi/180.) N
(        cthna = ) S
(cos) K
(\(thrad\)) p n
(        qrr = ) S
(sqrt) K
(\(2*k0*k0*\(1-cthna\)\)) p n
(        tabkq\(iaj,ibj,ikj,iqj,iqrr\)=wxxi\(qrr,xq,tnaux,nthin,nthin\)) N
( 200   ) S
(continue) K n
(!        nullify\(tnaux\)) c n
( 191   ) p
(continue) K n
() p n
() N
(       ) S
(do) K
( 250 ibj = 0,isnx) p n
(       ) S
(do) K
( 250 ibjp = -ibj,ibj) p n
(       ) S
(do) K
( 280 i = 0,1) p n
(       ms1 = - 0.5 + i) N
(       ) S
(do) K
( 280 j = 0,1) p n
(       ms1p = - 0.5 + j) N
(         ) S
(do) K
( 300 iqrr = 1, nangles) p n
(          aux = \(0.d0,0.d0\)) N
(          ) S
(do) K
( 350 iaj=0,isnx) p n
(          ) S
(do) K
( 350 iajp = -iaj,iaj) p n
(          ) S
(do) K
( 350 ikj=) p
(abs) K
(\(iaj-ibj\),iaj+ibj ) p n
(          ) S
(do) K
( 350 iqj=-ikj,ikj) p n
(          taux = tabkq\(iaj,ibj,ikj,iqj,iqrr\)) N
(          ) S
(if) K
( \(iqj) p
(.lt.) K
(0\) taux = ) p n
(     *    tabkq\(iaj,ibj,ikj,-iqj,iqrr\)*\(-1\)**\(ikj-iqj\)  ) N
(          aux = aux + \(-1\)**iqj * ) S
(sqrt) K
(\(2*s2+1\)/hat\(ibj\)*sred\(iaj\)) p n
(     *    *cleb6\(s1+zz,ms1+zz,iaj+zz,iajp+zz,s1+zz,ms1p+zz\)*sred\(ibj\)) N
(     *    *cleb6\(iaj+zz,iajp+zz,ibj+zz,ibjp+zz,ikj+zz,-iqj+zz\)*taux    ) N
( 350   ) S
(continue) K n
(       ) p n
(       tnnu\(ibj,ibjp,i,j,iqrr\) = aux  ) N
( ) S
(!      if \(abs\(aux\)>1e-10\) write\(*,*\) ibj,ibjp,i,j,iqrr,) c n
( ) p
(!    %   tnnu\(ibj,ibjp,i,j,iqrr\)) c n
( 300   ) p
(continue) K n
( 280   ) p
(continue) K n
( 250   ) p
(continue) K n
() p n
(c***   Calculates the tensors to be used in the valence-valence and) c n
(c***   valence-core contributions) N
(mstmain.f90) (Page 19/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(       ) S
(do) K
( 390 iqrr = 1, nangles ) p n
(       ) S
(do) K
( 400 ) p
(if) K
( = 0,mllmx) p n
(       ) S
(do) K
( 400 ifp = -) p
(if) K
(,) p
(if) K n
(       ) p
(do) K
( 400 ib1j = 0,isnx) p n
(       ) S
(do) K
( 400 ib2j = 0,isnx) p n
(       tauvv\(iqrr,) S
(if) K
(,ifp,ib1j,ib2j\) = \(0.d0,0.d0\)) p n
(       ) S
(do) K
( 400 ib1jp = -ib1j,ib1j) p n
(       ) S
(do) K
( 400 ib2jp = -ib2j,ib2j) p n
(       ) S
(do) K
( 400 i = 0,1) p n
(       ms1 = - 0.5 + i) N
(       ) S
(do) K
( 400 j = 0,1) p n
(       ms1p = - 0.5 + j) N
(       auxp = tnnu\(ib2j,ib2jp,i,j,iqrr\)) N
(       tauvv\(iqrr,) S
(if) K
(,ifp,ib1j,ib2j\) = tauvv\(iqrr,) p
(if) K
(,ifp,ib1j,ib2j\)) p n
(     *     + \(-1\)**\(ifp+ib1jp\) * tnnu\(ib1j,ib1jp,i,j,iqrr\) ) N
(     *     * ) S
(conjg) K
(\(auxp\)/\(2*s1+1\)) p n
(     *     * cleb6\(ib1j+zz,ib1jp+zz,ib2j+zz,-ib2jp+zz,) S
(if) K
(+zz,ifp+zz\)) p n
( 400   ) S
(continue) K n
() p n
(       ) S
(do) K
( 450 ib1j = 0,isnx) p n
(       ) S
(do) K
( 450 ib1jp = -ib1j,ib1j) p n
(       tauvc\(iqrr,ib1j,ib1jp\)  = \(0.d0, 0.d0\)) N
(       ) S
(do) K
( 450 i = 0,1) p n
(       ms1 = - 0.5 + i) N
(       ) S
(do) K
( 450 j = 0,1) p n
(       ms1p = - 0.5 + j) N
(       tauvc\(iqrr,ib1j,ib1jp\) = tauvc\(iqrr,ib1j,ib1jp\) ) N
(     *              +  tnnu\(ib1j,ib1jp,i,j,iqrr\)/\(2*s1+1\)) N
( 450   ) S
(continue) K n
( 390   ) p
(continue) K n
() p n
(       ) S
(do) K
( 500 iqrr = 1, nangles ) p n
(       qrr = radxisd\(iqrr\) ) N
(       ) S
(write) K
(\(93,777\)qrr,tauvv\(iqrr,0,0,1,1\) ) p n
(       ) S
(write) K
(\(94,777\)qrr,tauvv\(iqrr,1,0,1,1\),tauvv\(iqrr,1,-1,1,1\)) p n
(       ) S
(write) K
(\(95,777\)qrr,tauvc\(iqrr,0,0\), tauvc\(iqrr,1,0\)) p n
( 500   ) S
(continue) K n
( 777   ) p
(format) K
(\(f7.3,4e12.4\)) p n
() N
( 1023  ) S
(format) K
(\(') p
(  ) str
(',f5.1,f8.4,4e14.6\)) p n
(         ) S
(return) K n
(       ) p
(end) K
( ) p
(subroutine) K
( ) p
(tntensor) L n
(         ) p n
() N
() N
() N
(      ) S
(subroutine) K
( ) p
(shakeoff) L
(\(\)) p n
(*********************************************************************) c n
(c     Calculates the inelstic cross section using the shakeoff) N
(c     mechanism) N
() p n
(       ) S
(use) K
( ) p
(wfns) l n
(       ) p
(use) K
( ) p
(scattering) l n
(       ) p
(implicit) K
( ) p
(real) K
(*8\(a-h,o-z\)) p n
(       ) S
(complex) K
(*16 tnct\(181\)) p n
(       ) S
(complex) K
(*16 wxxi) p n
(       ) S
(complex) K
(*16 tncchk) p n
(       ) S
(dimension) K
( theta\(181\),qcore\(181\)) p n
() N
(       zz = ) S
(cmplx) K
(\(0.d0,1.d0\)) p n
() N
(       ) S
(rewind) K
( 80) p n
(c **** reads tNA \(**SCATTERING AMPLITUDES**\) from MST - U on-shell) c n
(       ) p
(read) K
(\(80,*\) noangs,kcore) p n
(       ) S
(do) K
( 100 i=1,noangs      ) p n
(       ) S
(read) K
(\(80,*\)theta\(i\),tncre,tncimag) p n
(       tnct\(i\) = tncre+zz*tncimag) N
(       x = ) S
(cos) K
(\(theta\(i\)*pi/180.\)) p n
(mstmain.f90) (Page 20/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (10/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (21-22) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       qcore\(i\) = kcore*) p
(sqrt) K
(\(2 - 2*x\)) p n
( 100   ) S
(continue) K n
(       ) p n
() N
(c **** interpolates to obtain the tmatrix on the **th** grid for MST - T) c n
(       ) p
(do) K
( 300  ith = 1,nangles) p n
(       th = thmin + dth*\(ith-1\)) N
(       thrad = th*pi/180.) N
(       cthna = ) S
(cos) K
(\(thrad\)) p n
(       qq = ) S
(sqrt) K
(\(2*k0*k0*\(1-cthna\)\)) p n
(       tnath\(ith\) = wxxi\(qq,qcore,tnct,181,noangs\)) N
( 300   ) S
(continue) K n
() p n
() N
(c ***  calculates cross section ) c n
() p n
(       ) S
(do) K
( 400 ith = 1,nangles) p n
(       th = thmin + dth*\(ith-1\)) N
(       thrad = th*pi/180.) N
(       cthna = ) S
(cos) K
(\(thrad\)) p n
(       qq = ) S
(sqrt) K
(\(2*kcore*kcore*\(1-cthna\)\)) p n
(       tncchk = wxxi\(qq,qcore,tnct,181,noangs\)) N
(       aux = 1 - ffcth\(ith,0,0\)**2) N
(       xsoff = tncchk * ) S
(conjg) K
(\(tncchk\)*10*aux) p n
(       ) S
(write) K
(\(73,*\)th,xsoff, xsoff*0.5) p n
( 400   ) S
(continue) K n
( ) p n
() N
(       ) S
(return) K n
(       ) p
(end) K n
() p n
() N
() N
() N
(      ) S
(subroutine) K
( ) p
(xsecinel) L
(\(\)) p n
(c****************************************************************************) c n
(c     This subroutine evaluates the single scattering inelastic cross section) N
(c*****************************************************************************) N
(       ) p
(use) K
( ) p
(parameters) l n
(       ) p
(use) K
( ) p
(wfns) l n
(       ) p
(use) K
( ) p
(scattering) l n
(       ) p
(use) K
( ) p
(trdens) l n
(       ) p
(use) K
( ) p
(nnamps) l n
(       ) p
(use) K
( ) p
(constants) l n
(!       implicit real*8\(a-h,o-z\)) c n
(       ) p
(implicit) K
( ) p
(none) K n
(       ) p
(integer) K
(:: i,ic,) p
(if) K
(,im,ib,mif,mib,jnnp,ith,id,ibp,icp,in) p n
(       ) S
(integer) K
( :: llif,jnn) p n
(       ) S
(real) K
(*8 :: th,racah2,cleb6,factnn,factnc,factna,hat2) p n
(       ) S
(complex) K
(*16 wxxi) p n
(       ) S
(complex) K
(*16 aux,auxp) p n
() N
(!!$       complex*16 fstcore\(mrho,0:mll,0:inel\)) c n
(!!$       complex*16 fstval\(mrho,0:mll,0:mll,0:mll,0:inel\)) N
(!!$       complex*16 fstcth\(mthmx,0:mll,0:inel\)) N
(!!$       complex*16 fstvth\(mthmx,0:mll,0:mll,0:mll,0:inel\)) N
(!!$       complex*16 fstxth\(mthmx,0:mll,0:mll,0:mll,0:inel\)) N
() p n
(!       complex*16 testval\(200\),testcore\(200\),testvc1\(200\)) c n
(!       complex*16 testvc2\(200\)) N
(!       real*8   xscore\(mthmx\),xsval\(mthmx\),xsx\(mthmx\),xstot\(mthmx\)) N
(!       dimension  xscoreth\(500\),xsvalth\(500\) ) N
() p n
(       ) S
(complex) K
(*16::doublex1,doublex2) p n
() N
(!       dimension cgeomc\(0:mllmx,0:mll\),) c n
(!     *          cgeomv\(0:mllmx,0:2,0:isnx,0:2,0:2,0:isnx\),) N
(!     *           cgeomx\(0:2,0:isnx,0:2\)) N
() p n
(mstmain.f90) (Page 21/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       ) p
(complex) K
(*16,) p
(allocatable) K
(::fstcore\(:,:,:\),fstval\(:,:,:,:,:\)) p n
(       ) S
(complex) K
(*16,) p
(allocatable) K
(::fstcth\(:,:,:\),fstvth\(:,:,:,:,:\)) p
(!not used??) c n
(       ) p
(complex) K
(*16,) p
(allocatable) K
(::fstxth\(:,:,:,:,:\)) p n
(       ) S
(complex) K
(*16,) p
(allocatable) K
(::testval\(:\),testcore\(:\)) p n
(       ) S
(complex) K
(*16,) p
(allocatable) K
(::testvc1\(:\),testvc2\(:\)) p n
(       ) S
(real) K
(*8, ) p
(allocatable) K
(::cgeomc\(:,:\)) p n
(       ) S
(real) K
(*8, ) p
(allocatable) K
(::cgeomv\(:,:,:,:,:,:\),cgeomx\(:,:,:\)) p n
(       ) S
(real) K
(*8,) p
(allocatable) K
(::xscore\(:\),xsval\(:\),xsx\(:\),xstot\(:\),xsel\(:\)) p n
(       hat2\(i\)=\(2*i+1\)) N
(       ) N
(       ) S
(allocate) K
(\(fstcore\(nangles,0:mll,0:nwf-1\)\)) p n
(       ) S
(allocate) K
(\(fstval\(nangles,0:mll,0:mll,0:mll,0:nwf-1\)\)) p n
(       ) S
(allocate) K
(\(fstxth\(nangles,0:mll,0:isnx,0:mll,0:nwf-1\)\)) p n
(       ) S
(allocate) K
(\(xscore\(nangles\)\)) p n
(       ) S
(allocate) K
(\(xsval\(nangles\)\)) p n
(       ) S
(allocate) K
(\(xsx\(nangles\)\)) p n
(       ) S
(allocate) K
(\(xstot\(nangles\)\)) p n
(        ) S
(allocate) K
(\(xsel\(nangles\)\)) p n
(       ) S
(allocate) K
(\(testval\(nangles\),testcore\(nangles\)\)) p n
(       ) S
(allocate) K
(\(testvc1\(nangles\),testvc2\(nangles\)\)) p n
(       ) N
(       ) S
(allocate) K
( \(cgeomc\(0:mllmx,0:mll\)\)) p n
(       ) S
(allocate) K
( \(cgeomv\(0:mllmx,0:mll,0:isnx,0:dmax,0:mll,0:isnx\)\)) p n
(       ) S
(allocate) K
( \(cgeomx\(0:mll,0:isnx,0:dmax\)\)) p n
(       ) N
(       ) S
(if) K
( \(\(hbarc<1e-10\)) p
(.or.) K
(\(pi<1e-10\)\) ) p
(then) K n
(          ) p
(write) K
(\(*,*\)') p
(xsecinel: hbarc=0 or pi=0!) str
(') p n
(          ) S
(stop) K n
(       ) p
(end) K
( ) p
(if) K n
(       factnn = -hbarc*hbarc/2/pi/pi/mn) p n
(       factnc = -hbarc*hbarc*\(m4+1\)/4/pi/pi/mn/\(m4*1.\)) N
(       factna = -hbarc*hbarc*\(m234+1\)/4/pi/pi/mn/\(m234\)) N
(       jnn = TNQ\(5,na\(1\),1\)) N
() N
() N
(c ***  calculates the geometric coeficients: cgeomc\(if,ic\),) c n
(c ***  cgeomv\(if,ic,ib,id,ic',ib'\), cgeomx\(ic,ib,id\)           ) N
(       ) p
(do) K
( 20 ic=0,mll) p n
(       ) S
(do) K
( 20 ) p
(if) K
(=0,mllmx) p n
(       cgeomc\() S
(if) K
(,ic\) = 0.) p n
(           ) S
(do) K
( 25 im = -ic,ic) p n
() S 8 T (   cgeomc\() S
(if) K
(,ic\) = cgeomc\() p
(if) K
(,ic\) + ) p n
(     *         cleb6\(ic+zz,zz,ic+zz,zz,) S
(if) K
(+zz,zz\) ) p n
(     *         *\(-1\)**im * cleb6\(ic+zz,-im+zz,ic+zz,im+zz,) S
(if) K
(+zz,zz\)) p n
( 25        ) S
(continue) K n
(       ) p
(do) K
( 30 ib=0,isnx) p n
(       ) S
(do) K
( 30 id=0,dmax) p n
(       cgeomx\(ic,ib,id\)=\(-1\)**id *cleb6\(ic+zz,zz,id+zz,zz,ib+zz,zz\)) N
(     *                  *hat2\(ic\)/) S
(sqrt) K
(\(hat2\(ib\)*hat2\(id\)\)) p n
(       ) S
(do) K
( 30 ibp=0,isnx) p n
(       ) S
(do) K
( 30 icp=0,mll) p n
(       cgeomv\() S
(if) K
(,ic,ib,id,icp,ibp\) = \(-1\)**\(ibp+ic-) p
(if) K
(\) ) p n
(     *         * \(-1\)**\( 2*\(-ic+icp+id\) \) ) N
(     *         * hat2\(ic\)/hat2\(id\) * ) S
(sqrt) K
(\(hat2\(ic\)*hat2\(icp\)\)) p n
(     *         *cleb6\(ic+zz,zz,icp+zz,zz,) S
(if) K
(+zz,zz\)) p n
(     *         *racah2\(ib+zz,id+zz,) S
(if) K
(+zz,icp+zz,ic+zz,ibp+zz\)        ) p n
( 30    ) S
(continue) K n
( 20    ) p
(continue) K
(        ) p n
() N
(      ) N
() N
(c ***  calls the wigner rotation function) c n
(       ) p
(call) K
( ) p
(drotat) l
(\(\) ) p n
() N
(     ) N
() N
(c ***  Calculates the cross section contributions in th space) c n
() p n
(       ) S
(do) K
( 40 ith = 1,nangles) p n
(mstmain.f90) (Page 22/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (11/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (23-24) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       th = thmin + dth*\(ith-1\)) p n
(c ***  Calculates the cross section contribution: *core-core*,) c n
(       xscore\(ith\) = 0.d0 ) p n
(       xsval\(ith\) = 0.d0 ) N
(       testval\(ith\) = \(0.d0,0d0\)) N
(       xsx\(ith\) = 0.d0) N
(       testvc1\(ith\) = \(0.d0,0.d0\) ) N
(       testvc2\(ith\) = \(0.d0,0.d0\)) N
(c ***  loop over excited states ) c n
(!! CHANGE 3/10/2003: amoro) N
(!       do 50 in=1,NWF-1) N
(       ) p
(do) K
( 50 in=0,NWF-1 ) p n
(       doublec\(ith,in\) = 0.d0) N
(       doublev\(ith,in\) = 0.d0) N
(       doublex\(ith,in\) = 0.d0) N
(       jnnp = TNQ\(5,na\(in+1\),in+1\)         ) N
(c ***  loop over quantum numbers) c n
(       xscin\(ith,in\) = 0.d0) p n
() N
() N
(      ) N
(!       write\(60,*\) ith,in) c n
(       ) p n
(       ) N
(       ) S
(do) K
( 60 ic=0,mll) p n
(       fstcore\(ith,ic,in\) = ) N
(     *          tnath\(ith\)*ffcth\(ith,ic,in\)*factnc/factna) N
(!      write\(60,*\) fstcore\(ith,ic,in\)) c n
(      ) p
(write) K
(\(60,*\) ffcth\(ith,ic,in\)) p n
(!        if \(abs\(fstcore\(ith,ic,in\)\)>1.e-10\)) c n
(!     &   write\(60,'\(1i4, 4g14.6,2i4\)'\)  ith,tnath\(ith\),) N
(!     & ffcth\(ith,ic,in\),ic,in) N
() p n
(     ) N
(        ) N
(           ) N
(       ) S
(do) K
( 60 ) p
(if) K
(=0,mllmx) p n
(       llif = 0) N
(!       write\(60,*\) fstcore\(ith,ic,in\)) c n
(       xscore\(ith\) = xscore\(ith\) +  dtheta\(ith,) p
(if) K
(,llif\)*cgeomc\() p
(if) K
(,ic\)*) p n
(     *    fstcore\(ith,ic,in\)*) S
(conjg) K
(\(fstcore\(ith,ic,in\)\)*10.     ) p n
() N
(       testcore\(ith\) = testcore\(ith\) + dtheta\(ith,) S
(if) K
(,llif\)*cgeomc\() p
(if) K
(,ic\)) p n
(     *    *fstcore\(ith,ic,in\)*) S
(conjg) K
(\(fstcore\(ith,ic,in\)\)*10.) p n
(       ) N
(       xscin\(ith,in\)=xscin\(ith,in\) + dtheta\(ith,) S
(if) K
(,llif\)*cgeomc\() p
(if) K
(,ic\)*) p n
(     *    fstcore\(ith,ic,in\)*) S
(conjg) K
(\(fstcore\(ith,ic,in\)\)*10.) p n
() N
(       doublec\(ith,in\)=doublec\(ith,in\)+dtheta\(ith,) S
(if) K
(,llif\)) p n
(     *    * cgeomc\() S
(if) K
(,ic\) *) p n
(     *    fstcore\(ith,ic,in\)*) S
(conjg) K
(\(fstcore\(ith,ic,in\)\)*10.) p n
( 60    ) S
(continue) K n
(c 50    continue) c n
() p n
(        ) N
() N
(c ***  Calculates the cross section contribution: *valence-valence*,) c n
(c       xsval\(ith\) = 0.d0 ) N
(c       testval\(ith\) = \(0.d0,0d0\)) N
(c ***  loop over excited states ) N
(c      do 150 in=1,NWF-1) N
(       jnnp = TNQ\(5,na\(in+1\),in+1\)) p n
(c ***  loop over quantum numbers) c n
(       ) p
(do) K
( 160 ic=0,mll) p n
(       ) S
(do) K
( 160 ib=0,isnx) p n
(       ) S
(do) K
( 160 id=0,dmax) p n
(       ) S
(do) K
( 160 ) p
(if) K
(=0,mllmx) p n
(       ) S
(do) K
( 160 icp=0,mll) p n
(       ) S
(do) K
( 160 ibp=0,isnx ) p n
(mstmain.f90) (Page 23/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(       ) p
(do) K
( 160 mif =-) p
(if) K
(,) p
(if) K n
(        aux = ) p
(conjg) K
(\(ffvth\(ith,icp,ibp,id,in\)\)) p n
(     *        *cgeomv\() S
(if) K
(,ic,ib,id,icp,ibp\)   ) p n
(        testval\(ith\) =  testval\(ith\) + aux*ffvth\(ith,ic,ib,id,in\)) N
(     *      *dtheta\(ith,) S
(if) K
(,mif\) * tauvv\(ith,) p
(if) K
(,mif,ib,ibp\)) p n
(     *       *10.*2*\(factnn/factna\)**2) N
(        xsval\(ith\) = ) S
(real) K
(\( testval\(ith\) \)) p n
(        doublev\(ith,in\) = doublev\(ith,in\)+aux*ffvth\(ith,ic,ib,id,in\)) N
(     *      *dtheta\(ith,) S
(if) K
(,mif\) * tauvv\(ith,) p
(if) K
(,mif,ib,ibp\)) p n
(     *       *10.*2*\(factnn/factna\)**2) N
( 160   ) S
(continue) K n
(c 150   continue) c n
() p n
(c ***  Calculates the cross section contribution: valence-core,) c n
(c       xsx\(ith\) = 0.d0) N
(c       testvc1\(ith\) = \(0.d0,0.d0\) ) N
(c       testvc2\(ith\) = \(0.d0,0.d0\)) N
(       doublex1 = \(0.d0,0.d0\)) p n
(       doublex2 = \(0.d0,0.d0\)) N
(c ***  loop over excited states ) c n
(c       do 250 in=1,NWF-1) N
(       jnnp = TNQ\(5,na\(in+1\),in+1\)) p n
(c ***  loop over quantum numbers) c n
(       ) p
(do) K
( 260 ib=0,isnx) p n
(        aux = \(0.d0,0.d0\)      ) N
(        ) S
(do) K
( 265 mib = -ib,ib    ) p n
(        aux = aux + tauvc\(ith,ib,mib\)*) N
(     *        dtheta\(ith,ib,mib\)) N
( 265   ) S
(continue) K
(  ) p n
(       ) N
() N
(       ) S
(do) K
( 260 ic=0,mll) p n
(       ) S
(do) K
( 260 id=0,dmax) p n
(       fstxth\(ith,ic,ib,id,in\) = ) N
(     *  ) S
(conjg) K
(\(tnath\(ith\)*ffcth\(ith,id,in\)\)*) p n
(     *  ffvth\(ith,ic,ib,id,in\)*factnc/factna*cgeomx\(ic,ib,id\)) N
() N
(        testvc1\(ith\) =  testvc1\(ith\) +) N
(     *     fstxth\(ith,ic,ib,id,in\)*aux*10.) N
(     *     * 2*factnn/factna) N
(        testvc2\(ith\) =  testvc2\(ith\) + ) S
(conjg) K
(\() p n
(     *     fstxth\(ith,ic,ib,id,in\)*aux*10.) N
(     *     * 2*factnn/factna\)) N
(!        xsx\(ith\) = real\(  testvc1\(ith\) +  testvc2\(ith\)   \)) c n
(       doublex1 = doublex1 +  ) p n
(     *     fstxth\(ith,ic,ib,id,in\)*aux*10.) N
(     *     * 2*factnn/factna) N
(       doublex2 = doublex2 +  ) N
(     *     ) S
(conjg) K
(\(fstxth\(ith,ic,ib,id,in\)*aux*10.) p n
(     *     * 2*factnn/factna\)) N
( 260   ) S
(continue) K n
(!       doublex\(ith,in\) = real \(doublex1 + doublex2\)) c n
(        doublex\(ith,in\) = doublex1*) p
(conjg) K
(\(doublex1\)) p n
(c 250   continue) c n
(        doublet\(ith,in\)= doublec\(ith,in\)+doublev\(ith,in\)) p n
(     *   +       doublex\(ith,in\)) N
( 50     ) S
(continue) K n
(        xsx\(ith\) =  testvc1\(ith\) + ) p
(conjg) K
(\(testvc1\(ith\)\) ) p n
( ) S
(!       xstot\(ith\) = xscore\(ith\)+ xsval\(ith\)+xsx\(ith\)) c n
( ) p
(!       write\(70,777\)th,xstot\(ith\),xscore\(ith\)  ) c n
( 40    ) p
(continue) K n
() p n
(        ) N
() N
(       ) S
(do) K
( 300 ith = 1,nangles) p n
(       th = thmin + dth*\(ith-1\)) N
(       xsel\(ith\)=0.0) N
(       xstot\(ith\) = 0.d0) N
(       xscore\(ith\) = 0.d0) N
(mstmain.f90) (Page 24/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (12/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (25-26) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(!! Change : 3/10/03 AMoro) c n
(        xsel\(ith\) = xsel\(ith\) +  doublec\(ith,0\)+doublev\(ith,0\)) p n
(     *   +       doublex\(ith,0\)) N
(       ) S
(do) K
( 350 in=1,NWF-1) p n
(       xstot\(ith\) = xstot\(ith\) +  doublec\(ith,in\)+doublev\(ith,in\)) N
(     *   +       doublex\(ith,in\)) N
(       xscore\(ith\) = xscore\(ith\) +  doublec\(ith,in\)) N
( 350   ) S
(continue) K n
(       ) p
(write) K
(\(99,*\)') p
(Writing elastic & total inelastic xsec) str
(') p n
(       ) S
(write) K
(\(70,777\)th,xstot\(ith\),xscore\(ith\) ) p n
(       ) S
(write) K
(\(71,777\)th,xsel\(ith\) ) p n
( 300   ) S
(continue) K
(    ) p n
() N
() N
( 555   ) S
(format) K
(\(i5, 10e12.3\)) p n
( 777   ) S
(format) K
(\(f8.5,2e12.3\)) p n
( 999   ) S
(format) K
(\(f8.5,5e12.3\)) p n
(       ) S
(return) K n
(       ) p
(end) K n
() p n
() N
(       ) S
(subroutine) K
( ) p
(xsection) L
(\(inelcb\)) p n
(c************************************************************************) c n
(c      old subroutine adds final states incoherently) N
(       ) p
(use) K
( ) p
(wfns) l n
(       ) p
(use) K
( ) p
(scattering) l n
(       ) p
(use) K
( ) p
(bfst) l n
(       ) p
(use) K
( ) p
(lfac) l n
() p n
(      ) S
(implicit) K
( ) p
(real) K
(*8\(a-h,o-z\)) p n
(       ) S
(complex) K
(*16 tmat1,snd) p n
(       ) S
(complex) K
(*16 cx1q\(150\), cx2q\(150\)) p n
(       ) S
(complex) K
(*16 wxxi) p n
(!       real*8 pleg\(500\)) c n
(!       common/bfst/fst\(0:mll,200\)) N
(      ) p n
(       nangles = \(thmax-thmin\)/dth + 1) N
(!       call  ptheta\(inelcb,pleg\) ) c n
(        ) p
(call) K
(  ) p
(ptheta) l
(\(inelcb\) ) p n
(       ) S
(do) K
( 100 iqrr = 1, mdelta) p n
(       qrr = radxisd\(iqrr\)) N
(       qdelta\(iqrr\) = qrr) N
(       tcore\(iqrr\) = \(0.d0,0.d0\)) N
(       tvalence\(iqrr\) = \(0.d0,0.d0\)) N
(       snd = tcore\(iqrr\) + tvalence\(iqrr\)) N
(       ) S
(if) K
( \(ival) p
(.eq.) K
(1\)  snd = tcore\(iqrr\)) p n
(       xsect1 = fst\(1,iqrr\) * ) S
(conjg) K
(\(fst\(1,iqrr\)\) * 10.) p n
(       cx1q\(iqrr\) = xsect1) N
(       ) S
(write) K
(\(9,*\)') p
(old cx1q) str
(', cx1q\(iqrr\),fst\(1,iqrr\)) p n
(       xsect2 = \(fst\(1,iqrr\)+snd\) * ) S
(conjg) K
(\(fst\(1,iqrr\)+snd\) * 10.) p n
(       cx2q\(iqrr\) = xsect2) N
( 100   ) S
(continue) K n
() p n
(       ) S
(do) K
( 150 ith = 1,nangles) p n
(       th = thmin + dth*\(ith-1\)) N
(       thrad = th*pi/180.) N
(       cthna = ) S
(cos) K
(\(thrad\)) p n
(       qq = ) S
(sqrt) K
(\(2*k0*k0*\(1-cthna\)\)) p n
(       xsect1 = wxxi\(qq,qdelta,cx1q,200,mdelta\)) N
(       xsect2 = wxxi\(qq,qdelta,cx2q,200,mdelta\)) N
(       xsect1 = pleg\(ith\)*xsect1) N
(       ) S
(write) K
(\(9,*\)th,xsect1) p n
( 150   ) S
(continue) K n
(       ) p
(return) K n
(       ) p
(end) K n
() p n
() N
() N
(       ) S
(subroutine) K
( ) p
(sigex) L
(\(\)) p n
(mstmain.f90) (Page 25/27) (Oct 03, 03 12:51) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(******************************************************************************) c n
(*     This subroutine calculates the integrated differential cross section for) N
(*      all the excited states from the core contribution.) N
(*******************************************************************************) N
(       ) p
(use) K
( ) p
(parameters) l n
(       ) p
(use) K
( ) p
(wfns) l n
(       ) p
(use) K
( ) p
(scattering) l n
(       ) p
(use) K
( ) p
(trdens) l n
(       ) p
(use) K
( ) p
(constants) l n
(       ) p
(implicit) K
( ) p
(real) K
(*8\(a-h,o-z\)) p n
(       ) S
(real) K
(*8,) p
(allocatable) K
(:: bs\(:\) ) p
(!\(mthmx\)) c n
(       ) p
(real) K
(*8,) p
(allocatable) K
(:: xsecex\(:\)) p n
() N
(       ) N
(       ) S
(write) K
(\(99,*\)') p
( - In sigex:) str
(') p n
(       ) S
(write) K
(\(99,) p
(fmt) K
(=') p
(\("+ Allocating",i4," angles for bs"\)) str
('\),nangles) p n
(       ) S
(allocate) K
(\(bs\(nangles\)\)) p n
(       ) S
(allocate) K
(\(xsecex\(nwf\)\)) p n
() N
( ) N
(        dthrad = dth*pi/180.) N
(        icount = 0.) N
(        ) S
(do) K
( 20 in=NWF-1,1,-1) p n
(        icount = icount + 1) N
(        ) S
(sum) K
( = 0.d0) p n
(        ) S
(do) K
( 40 ith = 1,nangles) p n
(        th = thmin + dth*\(ith-1\)) N
(        thrad = th*pi/180.) N
(        sinth = ) S
(sin) K
(\(thrad\)) p n
(c       bs\(ith\) =  xscin\(ith,in\)*sinth) c n
(        bs\(ith\) =  doublet\(ith,in\)*sinth) p n
(        ) S
(sum) K
( = ) p
(sum) K
( + bs\(ith\)) p n
( 40     ) S
(continue) K n
(        ) p
(call) K
( ) p
(sim) l
(\(bs,res,1,nangles,dthrad,mthmx\)) p n
(        xsecex\() S
(in) k
(\) = res * 2 * pi) p n
(        ) S
(call) K
( ) p
(sim) l
(\(bs,res2,46,90,dthrad,mthmx\)) p n
(        xs2pth = res2 * 2 * pi) N
(        ) S
(write) K
(\(96,*\) ens\() p
(in) k
(\), xsecex\() p
(in) k
(\),xs2pth) p n
(c        write\(96,*\) ens\(icount\), xsecex\(in\),xs2pth) c n
( 20     ) p
(continue) K n
() p n
(c **    Write double cross section ) c n
(        ) p
(write) K
(\(65,*\)thmin,thmax,dth) p n
(        ) S
(write) K
(\(65,*\)NWF-1) p n
(!        write\(98,fmt='\("#Double: 4i4\)'\)thmin,thmax,dth,NWF-1) c n
(        ) p
(do) K
( 60 ith = 1,nangles) p n
(        ) S
(do) K
( 60 in=NWF-1,1,-1) p n
(c       write\(65,*\)xscin\(ith,in\)) c n
(        ) p
(write) K
(\(65,*\)ens\() p
(in) k
(\),doublet\(ith,in\)) p n
(        th = thmin + dth*\(ith-1\)) N
(        ) S
(write) K
(\(66,*\)ens\() p
(in) k
(\),th,doublet\(ith,in\)) p n
( 60     ) S
(continue) K n
() p n
(!       write\(98,*\)'#differential cross section') c n
(        ) p
(do) K
( 75 ith = 1,nangles) p n
(        th = thmin + dth*\(ith-1\)) N
(        auxth = 0.d0) N
(        ) S
(do) K
( 70 in=NWF-1,1,-1) p n
(        auxth = auxth + doublet\(ith,in\)) N
( 70     ) S
(continue) K n
(!        write\(98,*\)th,auxth) c n
( 75     ) p
(continue) K n
(        ) p
(deallocate) K
(\(xsecex\)) p n
(        ) S
(return) K n
(        ) p
(end) K n
() p n
() N
() N
() N
(mstmain.f90) (Page 26/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (13/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage
%%Page: (27) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso15dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() N
(mstmain.f90) (Page 27/27) (Oct 03, 03 12:51) title
border
grestore
(Printed by Antonio M. Moro Mu\361oz) rhead
(mstmain.f90) (14/14) (Friday October 03, 2003) footer
end % of iso15dict
pagesave restore
showpage

%%Trailer
end
%%EOF
